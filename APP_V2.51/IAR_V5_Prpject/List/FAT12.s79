//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   01/Jul/2011  14:36:26 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  thumb                                               /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\Design\DS203\PRG\APP_V2.50\source\FAT12.c        /
//    Command line    =  D:\Design\DS203\PRG\APP_V2.50\source\FAT12.c -lA    /
//                       D:\Design\DS203\PRG\APP_V2.50\IAR_V4_Prpject\List\  /
//                       -o D:\Design\DS203\PRG\APP_V2.50\IAR_V4_Prpject\Obj /
//                       \ -s9 --debug --cpu_mode thumb --endian little      /
//                       --cpu cortex-M3 --stack_align 4 --fpu None          /
//                       --dlib_config "C:\Program Files\IAR                 /
//                       Systems\Embedded Workbench 4.0                      /
//                       Evaluation\arm\LIB\dl7mptnnl8f.h" -I                /
//                       D:\Design\DS203\PRG\APP_V2.50\IAR_V4_Prpject\..\..\ /
//                       FWLib\inc\ -I D:\Design\DS203\PRG\APP_V2.50\IAR_V4_ /
//                       Prpject\..\..\USBLib\inc\ -I                        /
//                       D:\Design\DS203\PRG\APP_V2.50\IAR_V4_Prpject\..\inc /
//                       lude\ -I "C:\Program Files\IAR Systems\Embedded     /
//                       Workbench 4.0 Evaluation\arm\INC\"                  /
//                       --inline_threshold=16                               /
//    List file       =  D:\Design\DS203\PRG\APP_V2.50\IAR_V4_Prpject\List\F /
//                       AT12.s79                                            /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME FAT12

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__thumb"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable4 EQU 0
        MULTWEAK ??__ProgDiskPage??rT
        MULTWEAK ??__ReadDiskData??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC CloseFile
        FUNCTION CloseFile,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC N
        PUBLIC NextCluster
        FUNCTION NextCluster,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC Num
        PUBLIC OpenFileRd
        FUNCTION OpenFileRd,0203H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC OpenFileWr
        FUNCTION OpenFileWr,0203H
        LOCFRAME CSTACK, 36, STACK
        PUBLIC ProgFileSec
        FUNCTION ProgFileSec,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC ReadFileSec
        FUNCTION ReadFileSec,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC SeekBlank
        FUNCTION SeekBlank,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC SetCluster
        FUNCTION SetCluster,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC k
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, R13:32, R14:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI R14 Undefined
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
__ProgDiskPage      SYMBOL "__ProgDiskPage"
__ReadDiskData      SYMBOL "__ReadDiskData"
??__ProgDiskPage??rT SYMBOL "??rT", __ProgDiskPage
??__ReadDiskData??rT SYMBOL "??rT", __ReadDiskData

        EXTERN __ProgDiskPage
        FUNCTION __ProgDiskPage,0202H
        EXTERN __ReadDiskData
        FUNCTION __ReadDiskData,0202H

// D:\Design\DS203\PRG\APP_V2.50\source\FAT12.c
//    1 /********************* (C) COPYRIGHT 2011 e-Design Co.,Ltd. ********************
//    2  File Name : FAT12.c  
//    3  Version   : DS203_SYS Ver 1.5x                                  Author : bure
//    4 *******************************************************************************/
//    5 #include <string.h>
//    6 #include "FAT12.h"
//    7 #include "BIOS.h"
//    8 //#include "ASM.h"
//    9 #include "Function.h"
//   10 
//   11 #include "Draw.h"
//   12 #include "Interrupt.h"
//   13 
//   14 #define FAT_LEN      0x1800 
//   15 #define FAT1_BASE    0x00001000   // FAT1区开始地址
//   16 #define FAT2_BASE    0x00002800   // FAT2区开始地址
//   17 #define ROOT_BASE    0x00004000   // 根目录开始地址
//   18 #define FILE_BASE    0x00008000   // 文件区开始地址
//   19 #define SEC_LEN      0x200        // 扇区长度
//   20 #define FAT1_SEC     0x0C         // FAT1扇区数
//   21 #define FAT2_SEC     0x0C         // FAT2扇区数
//   22 
//   23 #define OK           0            // 操作完成
//   24 #define SEC_ERR      1            // 扇区读写错误
//   25 #define FAT_ERR      2            // FAT表读写错误
//   26 #define OVER         3            // 操作溢出
//   27 #define NEW          4            // 新目录项
//   28 #define END          0xFFF        // 链接结束
//   29 
//   30 #define OW           0            // 或写(数据从0变1改写)
//   31 #define RW           1            // 重写
//   32 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   33   u8 N[10];  
N:
        DS8 12

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   34    u8 Num[10];  
Num:
        DS8 12

        RSEG DATA_Z:DATA:SORT:NOROOT(1)
//   35   u16 k = 0;
k:
        DS8 2
//   36 /*******************************************************************************
//   37  读磁盘页面(256 Bytes)  包含USB读写冲突后重读
//   38 ******************************************************************************
//   39 u8 ReadDiskData(u8* pBuffer, u32 ReadAddr, u16 Lenght)
//   40 {
//   41   u8 n = 0;
//   42   
//   43   while(1){
//   44     Clash = 0;
//   45     __ExtFlash_PageRD(pBuffer, ReadAddr, Lenght);
//   46     if(n++ > 6) return SEC_ERR;     // 超时出错返回
//   47     if(Clash == 0) return OK;       // 无冲突产生则返回
//   48   }
//   49 }*/
//   50 /*******************************************************************************
//   51  写磁盘页面(256 Bytes)  包含USB读写冲突后重写
//   52 ******************************************************************************
//   53 u8 ProgDiskPage(u8* pBuffer, u32 ProgAddr)
//   54 {                         
//   55   u8   n = 0; 
//   56   
//   57   while(1){
//   58     Clash = 0;
//   59     __ExtFlash_PageWR(pBuffer, ProgAddr);
//   60     if(n++ > 6) return SEC_ERR;     // 超时出错返回
//   61     if(Clash == 0) return OK;       // 无冲突产生则返回
//   62   }
//   63 } */
//   64 /*******************************************************************************
//   65  查找下一个链接簇号后返回，当前簇号保存在指针+1的位置
//   66 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function NextCluster
        THUMB
//   67 u8 NextCluster(u16* pCluster)
//   68 {
NextCluster:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   69   u16 FatNum;
//   70   u32 Addr = FAT1_BASE +(*pCluster + *pCluster/2);
//   71   
//   72   *(pCluster+1)= *pCluster;                                   // 保存前一个簇号
//   73   *pCluster = 0;
//   74   if((*(pCluster+1) >= END)||(*(pCluster+1)< 2)) return OK;
        LDR.N    R5,??DataTable3  ;; 0xfff
        MOVS     R4,R0
        SUB      SP,SP,#+4
        CFI CFA R13+16
        LDRH     R0,[R4, #+0]
        LSRS     R1,R0,#+1
        ADDS     R0,R0,R1
        ADDS     R1,R0,#+4096
        LDRH     R0,[R4, #+0]
        STRH     R0,[R4, #+2]
        MOVS     R0,#+0
        STRH     R0,[R4, #+0]
        LDRH     R0,[R4, #+2]
        CMP      R0,R5
        BCS.N    ??NextCluster_0
        CMP      R0,#+2
        BCS.N    ??NextCluster_1
??NextCluster_2:
        B.N      ??NextCluster_0
//   75   if(__ReadDiskData((u8*)&FatNum, Addr, 2)!= OK) return SEC_ERR;
??NextCluster_1:
        MOVS     R2,#+2
        MOV      R0,SP
        _BLF     __ReadDiskData,??__ReadDiskData??rT
        CBZ      R0,??NextCluster_3
        MOVS     R0,#+1
        B.N      ??NextCluster_4
//   76   *pCluster= (*(pCluster+1) & 1)?(FatNum >>4):(FatNum & 0x0FFF); // 指向下一个簇号
??NextCluster_3:
        LDRH     R0,[R4, #+2]
        LSLS     R0,R0,#+31
        ITTEE   PL 
        LDRHPL   R0,[SP, #+0]
        ANDPL    R5,R5,R0
        LDRHMI   R0,[SP, #+0]
        LSRMI    R5,R0,#+4
        STRH     R5,[R4, #+0]
//   77   return OK; 
??NextCluster_0:
        MOVS     R0,#+0
??NextCluster_4:
        ADD      SP,SP,#+4
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock0
//   78 }
//   79 /*******************************************************************************
//   80  读文件扇区(512 Bytes), 返回时指针指向下一个簇号，当前簇号保存在指针+1的位置
//   81 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function ReadFileSec
        THUMB
//   82 u8 ReadFileSec(u8* pBuffer, u16* pCluster)
//   83 {
ReadFileSec:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+4
        CFI CFA R13+20
        MOVS     R4,R1
        MOVS     R5,R0
//   84   u32 ReadAddr = FILE_BASE + SEC_LEN*(*pCluster-2);
        LDRH     R0,[R4, #+0]
//   85   
//   86   if(__ReadDiskData(pBuffer, ReadAddr, 256)!=OK) return SEC_ERR; // 读前半扇区
        MOVS     R2,#+256
        LSLS     R0,R0,#+9
        ADDS     R6,R0,#+31744
        MOVS     R1,R6
        MOVS     R0,R5
        _BLF     __ReadDiskData,??__ReadDiskData??rT
        CBZ      R0,??ReadFileSec_0
??ReadFileSec_1:
        MOVS     R0,#+1
        B.N      ??ReadFileSec_2
//   87   pBuffer += 256;  ReadAddr += 256;
//   88   if(__ReadDiskData(pBuffer, ReadAddr, 256)!=OK) return SEC_ERR; // 读后半扇区
??ReadFileSec_0:
        MOVS     R2,#+256
        ADDW     R1,R6,#+256
        ADDW     R0,R5,#+256
        _BLF     __ReadDiskData,??__ReadDiskData??rT
        CMP      R0,#+0
        BNE.N    ??ReadFileSec_1
//   89   if(NextCluster(pCluster)!=0) return FAT_ERR;                 // 取下一个簇号
        LDRH     R0,[R4, #+0]
        LDR.N    R5,??DataTable3  ;; 0xfff
        LSRS     R1,R0,#+1
        ADDS     R0,R0,R1
        ADDS     R1,R0,#+4096
        LDRH     R0,[R4, #+0]
        STRH     R0,[R4, #+2]
        MOVS     R0,#+0
        STRH     R0,[R4, #+0]
        LDRH     R0,[R4, #+2]
        CMP      R0,R5
        BCS.N    ??ReadFileSec_3
        CMP      R0,#+2
        BCC.N    ??ReadFileSec_3
        MOVS     R2,#+2
        MOV      R0,SP
        _BLF     __ReadDiskData,??__ReadDiskData??rT
        CBZ      R0,??ReadFileSec_4
        MOVS     R0,#+2
        B.N      ??ReadFileSec_2
??ReadFileSec_4:
        LDRH     R0,[R4, #+2]
        LSLS     R0,R0,#+31
        ITTEE   PL 
        LDRHPL   R0,[SP, #+0]
        ANDPL    R5,R5,R0
        LDRHMI   R0,[SP, #+0]
        LSRMI    R5,R0,#+4
        STRH     R5,[R4, #+0]
//   90   return OK;
??ReadFileSec_3:
        MOVS     R0,#+0
??ReadFileSec_2:
        ADD      SP,SP,#+4
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock1
//   91 } 
//   92 /*******************************************************************************
//   93  写文件扇区(512 Bytes)，填写当前FAT表及返回查找到的下一个簇号
//   94 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ProgFileSec
        THUMB
//   95 u8 ProgFileSec(u8* pBuffer, u16* pCluster)
//   96 {
ProgFileSec:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+4
        CFI CFA R13+24
        MOVS     R4,R0
        MOVS     R5,R1
//   97   u16 Tmp;
//   98   u32 ProgAddr = FILE_BASE + SEC_LEN*(*pCluster-2);
        LDRH     R0,[R5, #+0]
        LSLS     R0,R0,#+9
        ADDS     R6,R0,#+31744
//   99   
//  100   if(__ProgDiskPage(pBuffer, ProgAddr)!= OK) return SEC_ERR; // 写前半扇区
        MOVS     R1,R6
        MOVS     R0,R4
        _BLF     __ProgDiskPage,??__ProgDiskPage??rT
        CBZ      R0,??ProgFileSec_0
??ProgFileSec_1:
        MOVS     R0,#+1
        B.N      ??ProgFileSec_2
//  101   pBuffer += 256;  ProgAddr += 256;
??ProgFileSec_0:
        ADDW     R4,R4,#+256
//  102   if(__ProgDiskPage(pBuffer, ProgAddr)!= OK) return SEC_ERR; // 写后半扇区
        ADDW     R1,R6,#+256
        MOVS     R0,R4
        _BLF     __ProgDiskPage,??__ProgDiskPage??rT
        CMP      R0,#+0
        BNE.N    ??ProgFileSec_1
//  103   if(NextCluster(pCluster)!=0) return FAT_ERR;                 // 取下一个簇号
        LDRH     R0,[R5, #+0]
        LDR.N    R7,??DataTable3  ;; 0xfff
        MOVS     R6,#+0
        LSRS     R1,R0,#+1
        ADDS     R0,R0,R1
        ADDS     R1,R0,#+4096
        LDRH     R0,[R5, #+0]
        STRH     R0,[R5, #+2]
        STRH     R6,[R5, #+0]
        CMP      R0,R7
        BCS.N    ??ProgFileSec_3
        CMP      R0,#+2
        BCC.N    ??ProgFileSec_3
        MOVS     R2,#+2
        MOV      R0,SP
        _BLF     __ReadDiskData,??__ReadDiskData??rT
        CBZ      R0,??ProgFileSec_4
        MOVS     R0,#+2
        B.N      ??ProgFileSec_2
??ProgFileSec_4:
        LDRH     R0,[R5, #+2]
        LSLS     R0,R0,#+31
        ITTEE   PL 
        LDRHPL   R0,[SP, #+0]
        ANDPL    R0,R0,R7
        LDRHMI   R0,[SP, #+0]
        LSRMI    R0,R0,#+4
        STRH     R0,[R5, #+0]
//  104   Tmp = *(pCluster+1);
//  105   if(*pCluster == 0){
??ProgFileSec_3:
        LDRH     R0,[R5, #+0]
        CBNZ     R0,??ProgFileSec_5
//  106     *pCluster = Tmp;
        LDRH     R0,[R5, #+2]
        STRH     R0,[R5, #+0]
//  107     if(SeekBlank (pBuffer, pCluster )!= OK) return OVER;
        STRH     R0,[R5, #+2]
        STRH     R6,[R5, #+0]
        B.N      ??ProgFileSec_6
??ProgFileSec_7:
        LDRH     R0,[R5, #+0]
        ADDS     R0,R0,#+1
        STRH     R0,[R5, #+0]
??ProgFileSec_6:
        LDRH     R0,[R5, #+0]
        CMP      R0,R7
        BCS.N    ??ProgFileSec_8
        LDRH     R1,[R5, #+0]
        MOVS     R2,#+2
        LSRS     R0,R0,#+1
        ADDS     R0,R0,R1
        ADDS     R1,R0,#+4096
        MOV      R0,SP
        _BLF     __ReadDiskData,??__ReadDiskData??rT
        CBZ      R0,??ProgFileSec_9
        MOVS     R0,#+3
        B.N      ??ProgFileSec_2
??ProgFileSec_9:
        LDRH     R0,[R5, #+0]
        LSLS     R0,R0,#+31
        ITTEE   PL 
        LDRHPL   R0,[SP, #+0]
        ANDPL    R0,R0,R7
        LDRHMI   R0,[SP, #+0]
        LSRMI    R0,R0,#+4
        CMP      R0,#+0
        BNE.N    ??ProgFileSec_7
        LDRH     R0,[R5, #+0]
        LDRH     R1,[R5, #+2]
        CMP      R0,R1
        BEQ.N    ??ProgFileSec_7
//  108     if(SetCluster(pBuffer, pCluster )!= OK) return SEC_ERR;
??ProgFileSec_8:
        MOVS     R1,R5
        MOVS     R0,R4
        BL       SetCluster
        CMP      R0,#+0
        BNE.N    ??ProgFileSec_1
//  109   }
//  110   return OK;
??ProgFileSec_5:
        MOVS     R0,#+0
??ProgFileSec_2:
        ADD      SP,SP,#+4
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock2
//  111 }
//  112 /*******************************************************************************
//  113  查找空闲簇号，返回时指针指向下一个空闲簇号，当前簇号保存在指针+1的位置
//  114 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SeekBlank
        THUMB
//  115 u8 SeekBlank(u8* pBuffer, u16* pCluster)
//  116 {
SeekBlank:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  117   u16  Tmp;
//  118   u8   Buffer[2];
//  119 
//  120   *(pCluster+1)= *pCluster;                                    // 保存当前簇号
//  121   for(*pCluster=0; (*pCluster)<4095; (*pCluster)++){
        LDR.N    R5,??DataTable3  ;; 0xfff
        MOVS     R4,R1
        SUB      SP,SP,#+4
        CFI CFA R13+16
        LDRH     R0,[R4, #+0]
        STRH     R0,[R4, #+2]
        MOVS     R0,#+0
        B.N      ??SeekBlank_0
??SeekBlank_1:
        LDRH     R0,[R4, #+0]
        ADDS     R0,R0,#+1
??SeekBlank_0:
        STRH     R0,[R4, #+0]
        LDRH     R0,[R4, #+0]
        CMP      R0,R5
        BCS.N    ??SeekBlank_2
//  122     if(__ReadDiskData(Buffer, FAT1_BASE +(*pCluster)+(*pCluster)/2, 2)!= 0) return SEC_ERR;
        LDRH     R1,[R4, #+0]
        MOVS     R2,#+2
        LSRS     R0,R0,#+1
        ADDS     R0,R0,R1
        ADDS     R1,R0,#+4096
        MOV      R0,SP
        _BLF     __ReadDiskData,??__ReadDiskData??rT
        CBZ      R0,??SeekBlank_3
        MOVS     R0,#+1
        B.N      ??SeekBlank_4
//  123     Tmp = ((*pCluster)& 1)?((*(u16*)Buffer)>>4):((*(u16*)Buffer)& 0xFFF);
??SeekBlank_3:
        LDRH     R0,[R4, #+0]
        LSLS     R0,R0,#+31
        ITTEE   PL 
        LDRHPL   R0,[SP, #+0]
        ANDPL    R0,R0,R5
        LDRHMI   R0,[SP, #+0]
        LSRMI    R0,R0,#+4
//  124     if((Tmp == 0)&&((*pCluster)!= *(pCluster+1))) return OK;
        CMP      R0,#+0
        BNE.N    ??SeekBlank_1
        LDRH     R0,[R4, #+0]
        LDRH     R1,[R4, #+2]
        CMP      R0,R1
        BEQ.N    ??SeekBlank_1
??SeekBlank_2:
        MOVS     R0,#+0
??SeekBlank_4:
        ADD      SP,SP,#+4
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock3
//  125   }
//  126   return OK;
//  127 }         

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     0xfff
//  128 /*******************************************************************************
//  129  将下一簇号写入FAT表当前簇链接位，返回时指针指向下一簇号，指针+1为当前簇号
//  130 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function SetCluster
        THUMB
//  131 u8 SetCluster(u8* pBuffer, u16* pCluster)
//  132 {
SetCluster:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
//  133   u16  Offset, i, k;
//  134   u32  SecAddr;
//  135 
//  136   i = *(pCluster+1);                    // 提取原当前簇号
        LDRH     R4,[R1, #+2]
//  137   k = *pCluster;                        // 提取下一簇号
        LDRH     R5,[R1, #+0]
//  138   Offset = i + i/2;
//  139   SecAddr = FAT1_BASE +(Offset & 0xFF00);
//  140   Offset &=  0x00FF;
//  141   if(__ReadDiskData(pBuffer, SecAddr, 258)!= 0) return SEC_ERR; 
        MOVS     R2,#+258
        MOV      R8,R0
        ADDS     R0,R4,R4, LSR #+1
        UXTH     R0,R0
        ANDS     R1,R0,#0xFF00
        ADDS     R6,R1,#+4096
        UXTB     R7,R0
        MOVS     R1,R6
        MOV      R0,R8
        _BLF     __ReadDiskData,??__ReadDiskData??rT
        CBNZ     R0,??SetCluster_0
//  142   if(i & 1){
??SetCluster_1:
        ADDS     R0,R7,R8
        LSLS     R1,R4,#+31
        BPL.N    ??SetCluster_2
//  143     pBuffer[Offset  ]=(pBuffer[Offset]& 0x0F)+((k <<4)& 0xF0);
        LDRB     R1,[R0, #+0]
        LSLS     R1,R1,#+28
        LSRS     R1,R1,#+28
        ADDS     R1,R1,R5, LSL #+4
        STRB     R1,[R0, #+0]
//  144     pBuffer[Offset+1]= k >>4;
        ASRS     R1,R5,#+4
        B.N      ??SetCluster_3
//  145   } else {
//  146     pBuffer[Offset  ]= k & 0xFF;
??SetCluster_2:
        STRB     R5,[R0, #+0]
//  147     pBuffer[Offset+1]=(pBuffer[Offset+1]& 0xF0)+((k>>8)& 0x0F);
        LDRB     R1,[R0, #+1]
        ASRS     R2,R5,#+8
        LSLS     R2,R2,#+28
        ANDS     R1,R1,#0xF0
        LSRS     R2,R2,#+28
        ADDS     R1,R1,R2
??SetCluster_3:
        STRB     R1,[R0, #+1]
//  148   }
//  149   if(__ProgDiskPage(pBuffer,     SecAddr    )!= 0) return SEC_ERR;
        MOVS     R1,R6
        MOV      R0,R8
        _BLF     __ProgDiskPage,??__ProgDiskPage??rT
        CBNZ     R0,??SetCluster_0
//  150   if(__ProgDiskPage(pBuffer+256, SecAddr+256)!= 0) return SEC_ERR;
??SetCluster_4:
        ADDW     R1,R6,#+256
        ADDW     R0,R8,#+256
        _BLF     __ProgDiskPage,??__ProgDiskPage??rT
        CBZ      R0,??SetCluster_5
??SetCluster_0:
        MOVS     R0,#+1
//  151   return OK;
??SetCluster_5:
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock4
//  152 }
//  153 /*******************************************************************************
//  154  读模式打开文件：返回文件第一个簇号及目录项地址或 0簇号及第一个空白目录项地址
//  155 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function OpenFileRd
        THUMB
//  156 u8 OpenFileRd(u8* pBuffer, u8* pFileName, u16* pCluster, u32* pDirAddr)
//  157 {
OpenFileRd:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R9,R2
        MOVS     R4,R0
        MOVS     R5,R3
        MOV      R8,R1
//  158   u16 i, n;
//  159   
//  160   *pCluster = 0;
        MOVS     R0,#+0
        STRH     R0,[R9, #+0]
//  161   for(*pDirAddr=ROOT_BASE; *pDirAddr<FILE_BASE; ){
        MOVS     R0,#+16384
        STR      R0,[R5, #+0]
//  162     if(__ReadDiskData(pBuffer, *pDirAddr, 256)!= OK) return SEC_ERR;
??OpenFileRd_0:
        LDR      R1,[R5, #+0]
        MOVS     R2,#+256
        MOVS     R0,R4
        _BLF     __ReadDiskData,??__ReadDiskData??rT
        CBZ      R0,??OpenFileRd_1
        MOVS     R0,#+1
        B.N      ??OpenFileRd_2
//  163     for(n=0; n<256; n+=32){
//  164       for(i=0; i<11; i++){
??OpenFileRd_1:
        MOVS     R1,#+0
        B.N      ??OpenFileRd_3
//  165         if(pBuffer[n + i]!= 0){
//  166           if(pBuffer[n + i]!= pFileName[i]) break;
//  167           if(i == 10){                             // 找到文件名
//  168             *pCluster = *(u16*)(pBuffer + n + 0x1A); // 文件第一个簇号
//  169             return OK;         
//  170           }
//  171         } else return OK;               // 遇到第一个空白目录项后返回
//  172       }
//  173       *pDirAddr += 32;
??OpenFileRd_4:
        LDR      R1,[R5, #+0]
        ADDS     R0,R0,#+32
        UXTH     R0,R0
        ADDS     R1,R1,#+32
        STR      R1,[R5, #+0]
        MOVS     R3,#+256
        CMP      R0,R3
        BCC.N    ??OpenFileRd_1
        CMP      R1,#+32768
        BCC.N    ??OpenFileRd_0
//  174     }
//  175   }
//  176   return OVER;
        MOVS     R0,#+3
??OpenFileRd_2:
        POP      {R4-R9,PC}
??OpenFileRd_5:
        ADDS     R1,R1,#+1
        UXTH     R1,R1
        CMP      R1,#+11
        BCS.N    ??OpenFileRd_4
??OpenFileRd_3:
        ADDS     R6,R0,R1
        ADDS     R6,R4,R6
        LDRB     R7,[R6, #+0]
        CBZ      R7,??OpenFileRd_6
        MOV      R6,R7
        MOV      R7,R8
        LDRB     R3,[R7, R1]
        CMP      R6,R3
        BNE.N    ??OpenFileRd_4
        CMP      R1,#+10
        BNE.N    ??OpenFileRd_5
        ADDS     R0,R4,R0
        LDRH     R0,[R0, #+26]
        STRH     R0,[R9, #+0]
??OpenFileRd_7:
        MOVS     R0,#+0
        B.N      ??OpenFileRd_2
??OpenFileRd_6:
        B.N      ??OpenFileRd_7
        CFI EndBlock cfiBlock5
//  177 }
//  178 /*******************************************************************************
//  179  写模式打开文件：返回文件第一个簇号及目录项地址
//  180 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function OpenFileWr
        THUMB
//  181 u8 OpenFileWr(u8* pBuffer, u8* pFileName, u16* pCluster, u32* pDirAddr)
//  182 {
OpenFileWr:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R9,R3
        SUB      SP,SP,#+4
        CFI CFA R13+32
        MOVS     R5,R2
        MOV      R8,R1
        MOVS     R4,R0
//  183   u16 i, n;
//  184   
//  185   if(OpenFileRd(pBuffer, pFileName, pCluster, pDirAddr)!= OK) return SEC_ERR;
        MOVS     R0,#+0
        STRH     R0,[R5, #+0]
        MOVS     R0,#+16384
        STR      R0,[R9, #+0]
??OpenFileWr_0:
        LDR      R1,[R9, #+0]
        MOVS     R2,#+256
        MOVS     R0,R4
        _BLF     __ReadDiskData,??__ReadDiskData??rT
        CBNZ     R0,??OpenFileWr_1
??OpenFileWr_2:
        MOVS     R1,#+0
??OpenFileWr_3:
        ADDS     R6,R0,R1
        ADDS     R6,R4,R6
        LDRB     R7,[R6, #+0]
        CBZ      R7,??OpenFileWr_4
        MOV      R6,R7
        MOV      R7,R8
        LDRB     R3,[R7, R1]
        CMP      R6,R3
        BNE.N    ??OpenFileWr_5
        CMP      R1,#+10
        BEQ.N    ??OpenFileWr_6
        ADDS     R1,R1,#+1
        UXTH     R1,R1
        CMP      R1,#+11
        BCC.N    ??OpenFileWr_3
??OpenFileWr_5:
        LDR      R1,[R9, #+0]
        ADDS     R0,R0,#+32
        UXTH     R0,R0
        ADDS     R1,R1,#+32
        STR      R1,[R9, #+0]
        MOVS     R3,#+256
        CMP      R0,R3
        BCC.N    ??OpenFileWr_2
        CMP      R1,#+32768
        BCC.N    ??OpenFileWr_0
??OpenFileWr_1:
        B.N      ??OpenFileWr_7
??OpenFileWr_6:
        ADDS     R0,R4,R0
        LDRH     R0,[R0, #+26]
        STRH     R0,[R5, #+0]
//  186   if(*pCluster != 0) return OK;
??OpenFileWr_4:
        LDRH     R0,[R5, #+0]
        CBZ      R0,??OpenFileWr_8
        MOVS     R0,#+0
        B.N      ??OpenFileWr_9
//  187   else{                                                    // 当前项为空白目录项
//  188     if(SeekBlank(pBuffer, pCluster)!= OK) return OVER;     // 若FAT表满返回
??OpenFileWr_8:
        LDR.N    R6,??DataTable5  ;; 0xfff
        STRH     R0,[R5, #+2]
        MOVS     R0,#+0
        B.N      ??OpenFileWr_10
??OpenFileWr_11:
        LDRH     R0,[R5, #+0]
        ADDS     R0,R0,#+1
??OpenFileWr_10:
        STRH     R0,[R5, #+0]
        LDRH     R0,[R5, #+0]
        CMP      R0,R6
        BCS.N    ??OpenFileWr_12
        LDRH     R1,[R5, #+0]
        MOVS     R2,#+2
        LSRS     R0,R0,#+1
        ADDS     R0,R0,R1
        ADDS     R1,R0,#+4096
        MOV      R0,SP
        _BLF     __ReadDiskData,??__ReadDiskData??rT
        CBZ      R0,??OpenFileWr_13
        MOVS     R0,#+3
        B.N      ??OpenFileWr_9
??OpenFileWr_13:
        LDRH     R0,[R5, #+0]
        LSLS     R0,R0,#+31
        ITTEE   PL 
        LDRHPL   R0,[SP, #+0]
        ANDPL    R0,R0,R6
        LDRHMI   R0,[SP, #+0]
        LSRMI    R0,R0,#+4
        CMP      R0,#+0
        BNE.N    ??OpenFileWr_11
        LDRH     R0,[R5, #+0]
        LDRH     R1,[R5, #+2]
        CMP      R0,R1
        BEQ.N    ??OpenFileWr_11
//  189     n =*pDirAddr & 0xFF;                                   // n为当前页目录号
??OpenFileWr_12:
        LDR      R0,[R9, #+0]
//  190     if(__ReadDiskData(pBuffer,(*pDirAddr)-n, 256)!= OK) return SEC_ERR;
        MOVS     R2,#+256
        UXTB     R6,R0
        SUBS     R1,R0,R6
        MOVS     R0,R4
        _BLF     __ReadDiskData,??__ReadDiskData??rT
        CBNZ     R0,??OpenFileWr_7
//  191     for(i=0; i<11; i++) pBuffer[n + i]= pFileName[i];      // 创建新目录项
??OpenFileWr_14:
        ADDS     R2,R6,R0
        MOV      R12,R2
        MOV      R2,R8
        LDRB     R2,[R2, R0]
        MOV      R3,R12
        ADDS     R0,R0,#+1
        STRB     R2,[R4, R3]
        UXTH     R0,R0
        CMP      R0,#+11
        BCC.N    ??OpenFileWr_14
//  192     *(u16*)(pBuffer + n + 0x1A)= *pCluster;
        LDRH     R1,[R5, #+0]
        ADDS     R0,R4,R6
        STRH     R1,[R0, #+26]
//  193     if(__ProgDiskPage(pBuffer,(*pDirAddr)-n)!= OK) return SEC_ERR;
        LDR      R0,[R9, #+0]
        SUBS     R1,R0,R6
        MOVS     R0,R4
        _BLF     __ProgDiskPage,??__ProgDiskPage??rT
        CBZ      R0,??OpenFileWr_9
??OpenFileWr_7:
        MOVS     R0,#+1
//  194     return OK;
??OpenFileWr_9:
        ADD      SP,SP,#+4
        CFI CFA R13+28
        POP      {R4-R9,PC}
        CFI EndBlock cfiBlock6
//  195   }
//  196 }                
//  197 /*******************************************************************************
//  198  关闭文件，将结束符写入FAT表，将文件长度写入目录项，复制FAT1到FAT2
//  199 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function CloseFile
        THUMB
//  200 u8 CloseFile(u8* pBuffer, u32 Lenght, u16* pCluster, u32* pDirAddr)
//  201 {
CloseFile:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOVS     R4,R0
//  202   u16 n;
//  203   
//  204 //  *pCluster     = *(pCluster+1); // 提取前一个簇号
//  205   *pCluster = 0xFFF;
        LDR.N    R0,??DataTable5  ;; 0xfff
        MOVS     R5,R1
        MOVS     R1,R2
        MOVS     R6,R3
        STRH     R0,[R1, #+0]
//  206   SetCluster(pBuffer, pCluster); 
        MOVS     R0,R4
        BL       SetCluster
//  207   if(__ReadDiskData(pBuffer, (*pDirAddr &(~0xFF)), 256)!= OK) return SEC_ERR;
        LDR      R1,[R6, #+0]
        MVNS     R7,#+255
        RSBS     R2,R7,#+0
        ANDS     R1,R1,R7
        MOVS     R0,R4
        _BLF     __ReadDiskData,??__ReadDiskData??rT
        CBZ      R0,??CloseFile_0
??CloseFile_1:
        MOVS     R0,#+1
        POP      {R4-R7,PC}
//  208   *(u8* )(pBuffer +(*pDirAddr & 0xFF)+ 0x0B)= 0x20;
??CloseFile_0:
        LDR      R0,[R6, #+0]
        MOVS     R1,#+32
        UXTB     R0,R0
        ADDS     R0,R4,R0
        STRB     R1,[R0, #+11]
//  209   *(u32*)(pBuffer +(*pDirAddr & 0xFF)+ 0x1C)= Lenght;
        LDR      R0,[R6, #+0]
        UXTB     R0,R0
        ADDS     R0,R4,R0
        STR      R5,[R0, #+28]
//  210   if(__ProgDiskPage(pBuffer, (*pDirAddr &(~0xFF)))!= OK) return SEC_ERR;
        LDR      R0,[R6, #+0]
        ANDS     R7,R7,R0
        MOVS     R1,R7
        MOVS     R0,R4
        _BLF     __ProgDiskPage,??__ProgDiskPage??rT
        CMP      R0,#+0
        BNE.N    ??CloseFile_1
//  211   for(n=0; n<FAT1_SEC; n++){
        MOVS     R5,#+0
        B.N      ??CloseFile_2
//  212     if(__ReadDiskData(pBuffer, FAT1_BASE+n*256, 256)!= OK) return SEC_ERR;
??CloseFile_3:
        LSLS     R6,R5,#+8
        MOVS     R2,#+256
        ADDS     R1,R6,#+4096
        MOVS     R0,R4
        _BLF     __ReadDiskData,??__ReadDiskData??rT
        CMP      R0,#+0
        BNE.N    ??CloseFile_1
//  213     if(__ProgDiskPage(pBuffer, FAT2_BASE+n*256     )!= OK) return SEC_ERR;
        ADDS     R1,R6,#+10240
        MOVS     R0,R4
        _BLF     __ProgDiskPage,??__ProgDiskPage??rT
        CMP      R0,#+0
        BNE.N    ??CloseFile_1
//  214   } 
        ADDS     R5,R5,#+1
        UXTH     R5,R5
??CloseFile_2:
        CMP      R5,#+12
        BCC.N    ??CloseFile_3
//  215   return OK;
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock7
//  216 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable5:
        DC32     0xfff

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??__ReadDiskData??rT:
        LDR.N    R3,??Subroutine0_0  ;; __ReadDiskData
        BX       R3
        DATA
??Subroutine0_0:
        DC32     __ReadDiskData
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        THUMB
??__ProgDiskPage??rT:
        LDR.N    R3,??Subroutine1_0  ;; __ProgDiskPage
        BX       R3
        DATA
??Subroutine1_0:
        DC32     __ProgDiskPage
        CFI EndBlock cfiBlock9

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
// 1 138 bytes in segment CODE
//    26 bytes in segment DATA_Z
//    12 bytes in segment INITTAB
// 
// 1 122 bytes of CODE memory (+ 28 bytes shared)
//    26 bytes of DATA memory
//
//Errors: none
//Warnings: none
