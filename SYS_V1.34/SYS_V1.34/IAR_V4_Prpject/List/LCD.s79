//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   25/Apr/2011  15:04:51 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  thumb                                               /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\Users\Administrator\Desktop\mini DSO             /
//                       download\SYS_V1.34\SYS_V1.34\source\LCD.c           /
//    Command line    =  "C:\Users\Administrator\Desktop\mini DSO            /
//                       download\SYS_V1.34\SYS_V1.34\source\LCD.c" -lA      /
//                       "C:\Users\Administrator\Desktop\mini DSO            /
//                       download\SYS_V1.34\SYS_V1.34\IAR_V4_Prpject\List\"  /
//                       -o "C:\Users\Administrator\Desktop\mini DSO         /
//                       download\SYS_V1.34\SYS_V1.34\IAR_V4_Prpject\Obj\"   /
//                       -s9 --no_inline --cpu_mode thumb --endian little    /
//                       --cpu cortex-M3 --stack_align 4 -e --fpu None       /
//                       --dlib_config "E:\IARWorkBench(Cracked)\Embedded    /
//                       Workbench 4.0 Evaluation\ARM\LIB\dl7mptnnl8n.h" -I  /
//                       "C:\Users\Administrator\Desktop\mini DSO            /
//                       download\SYS_V1.34\SYS_V1.34\IAR_V4_Prpject\..\..\F /
//                       WLib\inc\" -I "C:\Users\Administrator\Desktop\mini  /
//                       DSO download\SYS_V1.34\SYS_V1.34\IAR_V4_Prpject\..\ /
//                       ..\USBLib\inc\" -I "C:\Users\Administrator\Desktop\ /
//                       mini DSO download\SYS_V1.34\SYS_V1.34\IAR_V4_Prpjec /
//                       t\..\include\" -I "E:\IARWorkBench(Cracked)\Embedde /
//                       d Workbench 4.0 Evaluation\ARM\INC\"                /
//    List file       =  C:\Users\Administrator\Desktop\mini DSO             /
//                       download\SYS_V1.34\SYS_V1.34\IAR_V4_Prpject\List\LC /
//                       D.s79                                               /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME LCD

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__thumb"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable14 EQU 0
??DataTable15 EQU 0
??DataTable16 EQU 0
??DataTable17 EQU 0
??DataTable19 EQU 0
??DataTable2 EQU 0
??DataTable21 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??__LCD_DMA_Ready??rT
        MULTWEAK ??__LCD_Fill??rT
        MULTWEAK ??__LCD_SetPixl??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Char_TAB_8x14
        PUBLIC Clear_Screen
        FUNCTION Clear_Screen,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC Delayms
        FUNCTION Delayms,0203H
        PUBLIC Display_Logo
        FUNCTION Display_Logo,0203H
        LOCFRAME CSTACK, 68, STACK
        PUBLIC Display_Str
        FUNCTION Display_Str,0203H
        LOCFRAME CSTACK, 36, STACK
        PUBLIC Fill_Buffer
        PUBLIC Get_Pixl
        FUNCTION Get_Pixl,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC Get_TAB_8x14
        FUNCTION Get_TAB_8x14,0203H
        PUBLIC LCD_EnterSleep_ILI9327
        FUNCTION LCD_EnterSleep_ILI9327,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC LCD_ExitSleep_ILI9327
        FUNCTION LCD_ExitSleep_ILI9327,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC LCD_Initial
        FUNCTION LCD_Initial,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC LCD_RD_Type
        FUNCTION LCD_RD_Type,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC LCD_Set_Block
        FUNCTION LCD_Set_Block,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC LCD_Type
        PUBLIC LCD_WR_Ctrl
        FUNCTION LCD_WR_Ctrl,0203H
        PUBLIC LCD_WR_REG
        FUNCTION LCD_WR_REG,0203H
        PUBLIC Point_SCR
        FUNCTION Point_SCR,0203H
        LOCFRAME CSTACK, 16, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, R13:32, R14:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI R14 Undefined
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
__LCD_DMA_Ready     SYMBOL "__LCD_DMA_Ready"
__LCD_Fill          SYMBOL "__LCD_Fill"
__LCD_SetPixl       SYMBOL "__LCD_SetPixl"
??__LCD_DMA_Ready??rT SYMBOL "??rT", __LCD_DMA_Ready
??__LCD_Fill??rT    SYMBOL "??rT", __LCD_Fill
??__LCD_SetPixl??rT SYMBOL "??rT", __LCD_SetPixl

        EXTERN Delay_Cnt
        EXTERN __LCD_DMA_Ready
        FUNCTION __LCD_DMA_Ready,0202H
        EXTERN __LCD_Fill
        FUNCTION __LCD_Fill,0202H
        EXTERN __LCD_SetPixl
        FUNCTION __LCD_SetPixl,0202H

// C:\Users\Administrator\Desktop\mini DSO download\SYS_V1.34\SYS_V1.34\source\LCD.c
//    1 /********************* (C) COPYRIGHT 2010 e-Design Co.,Ltd. ********************
//    2  File Name : LCD.c  
//    3  Version   : DS203_SYS Ver 1.3x                                  Author : bure
//    4 *******************************************************************************/
//    5 #include "stm32f10x_lib.h"
//    6 #include "Config.h"
//    7 #include "BIOS.h"
//    8 #include "LCD.h"
//    9 #include "ASM.h"
//   10 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   11 u32 LCD_Type;
LCD_Type:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(1)
//   12 u16 Fill_Buffer;
Fill_Buffer:
        DS8 2
//   13 //================================ ×Ö¿â¶¨Òå ====================================
//   14 //================================definition of char ==========================

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//   15 uc16 Char_TAB_8x14[744] =
Char_TAB_8x14:
        DATA
        DC16 0, 0, 0, 28, 32, 64, 64, 64, 64, 64, 32, 28, 0, 0, 0, 0, 0, 0, 0
        DC16 57344, 4096, 2048, 2048, 2048, 3120, 3168, 192, 384, 768, 1584
        DC16 3120, 0, 2048, 2048, 4096, 57344, 0, 0, 0, 0, 8208, 8208, 8208
        DC16 8208, 8208, 8208, 16368, 0, 0, 0, 4032, 8160, 12336, 8208, 0, 0, 0
        DC16 0, 8208, 12336, 8160, 4032, 0, 0, 0, 6336, 3456, 1792, 1792, 3456
        DC16 6336, 0, 0, 256, 256, 1984, 1984, 256, 256, 0, 0, 0, 0, 65532, 0
        DC16 0, 0, 0, 0, 256, 256, 256, 256, 256, 256, 0, 0, 0, 0, 48, 48, 0, 0
        DC16 0, 48, 96, 192, 384, 768, 1536, 3072, 0, 8160, 16368, 8336, 8976
        DC16 9232, 16368, 8160, 0, 0, 2064, 6160, 16368, 16368, 16, 16, 0, 4208
        DC16 12528, 8592, 8976, 9744, 14384, 6192, 0, 4128, 12336, 8720, 8720
        DC16 8720, 16368, 7648, 0, 768, 1792, 3328, 6416, 16368, 16368, 272, 0
        DC16 15904, 15920, 8720, 8720, 8976, 9200, 8672, 0, 4064, 8176, 12816
        DC16 8720, 8720, 1008, 480, 0, 12288, 12288, 8432, 8688, 8960, 15872
        DC16 15360, 0, 7648, 16368, 8720, 8720, 8720, 16368, 7648, 0, 7168
        DC16 15888, 8720, 8720, 8752, 16352, 8128, 0, 0, 0, 0, 3168, 3168, 0, 0
        DC16 0, 64, 64, 64, 64, 64, 64, 64, 64, 0, 256, 896, 1728, 3168, 6192
        DC16 4112, 0, 0, 144, 144, 144, 144, 144, 144, 0, 576, 576, 576, 576
        DC16 576, 576, 576, 0, 0, 4112, 6192, 3168, 1728, 896, 256, 0, 4032
        DC16 4128, 10128, 9360, 10192, 4176, 3968, 0, 2032, 4080, 6400, 12544
        DC16 6400, 4080, 2032, 0, 8208, 16368, 16368, 8720, 8720, 16368, 7648
        DC16 0, 4032, 8160, 12336, 8208, 8208, 12336, 6240, 0, 8208, 16368
        DC16 16368, 8208, 12336, 8160, 4032, 0, 8208, 16368, 16368, 8720, 10000
        DC16 12336, 14448, 0, 8208, 16368, 16368, 8720, 9984, 12288, 14336, 0
        DC16 4032, 8160, 12336, 8464, 8464, 12768, 6640, 0, 16368, 16368, 512
        DC16 512, 512, 16368, 16368, 0, 0, 0, 8208, 16368, 16368, 8208, 0, 0
        DC16 224, 240, 16, 8208, 16368, 16352, 8192, 0, 8208, 16368, 16368, 768
        DC16 3840, 15600, 12400, 0, 8208, 16368, 16368, 8208, 16, 48, 48, 0
        DC16 16368, 16368, 7168, 3584, 7168, 16368, 16368, 0, 16368, 16368
        DC16 7168, 3584, 1792, 16368, 16368, 0, 4032, 8160, 12336, 8208, 12336
        DC16 8160, 4032, 0, 8208, 16368, 16368, 8720, 8704, 15872, 7168, 0
        DC16 8160, 16368, 8208, 8304, 8240, 16376, 8168, 0, 8208, 16368, 16368
        DC16 8704, 8960, 16368, 7408, 0, 6240, 15472, 9744, 8720, 8976, 14832
        DC16 6368, 0, 0, 14336, 12304, 16368, 16368, 12304, 14336, 0, 16352
        DC16 16368, 16, 16, 16, 16368, 16352, 0, 16256, 16320, 96, 48, 96
        DC16 16320, 16256, 0, 16320, 16368, 112, 448, 112, 16368, 16320, 0
        DC16 12336, 15600, 4032, 768, 4032, 15600, 12336, 0, 0, 15360, 15888
        DC16 1008, 1008, 15888, 15360, 0, 14448, 12528, 8592, 8976, 9744, 15408
        DC16 14448, 0, 16, 48, 80, 400, 784, 3088, 16368, 0, 2048, 2048, 2048
        DC16 2048, 2048, 2048, 2048, 2048, 0, 0, 0, 64636, 640, 640, 256, 256
        DC16 512, 1024, 3072, 8176, 16368, 3072, 1024, 512, 256, 128, 192
        DC16 16352, 16368, 192, 128, 256, 8208, 8208, 8208, 8208, 8208, 8208
        DC16 8208, 8208, 224, 1520, 1296, 1296, 2016, 1008, 16, 0, 8208, 16368
        DC16 16352, 528, 528, 1008, 480, 0, 992, 2032, 1040, 1040, 1040, 1584
        DC16 544, 0, 480, 1008, 1552, 9232, 16368, 16368, 16, 0, 992, 2032
        DC16 1296, 1296, 1296, 1840, 800, 0, 0, 528, 8176, 16368, 8720, 12288
        DC16 6144, 0, 968, 2028, 1060, 1060, 1020, 2040, 1024, 0, 8208, 16368
        DC16 16368, 544, 1024, 2032, 1008, 0, 0, 0, 1040, 14320, 14320, 16, 0
        DC16 0, 0, 24, 28, 1028, 14332, 14328, 1024, 0, 8208, 16368, 16368
        DC16 8576, 960, 1648, 1072, 0, 0, 0, 8208, 16368, 16368, 16, 0, 0, 2032
        DC16 2032, 1536, 1008, 1536, 2032, 2032, 0, 1024, 2032, 1008, 1024
        DC16 1024, 2032, 1008, 0, 992, 2032, 1040, 1040, 1040, 2032, 992, 0
        DC16 1028, 2044, 1020, 1092, 1088, 1984, 896, 0, 896, 1984, 1088, 1092
        DC16 2044, 1020, 1028, 0, 1040, 2032, 1008, 1552, 1024, 1536, 768, 0, 0
        DC16 544, 1840, 1424, 1168, 1776, 608, 0, 1024, 1024, 8160, 16368, 1040
        DC16 1072, 32, 0, 2016, 2032, 16, 16, 2016, 2032, 16, 0, 0, 1984, 2016
        DC16 48, 48, 2016, 1984, 0, 2016, 2032, 48, 224, 48, 2032, 2016, 0
        DC16 1040, 1584, 992, 448, 992, 1584, 1040, 0, 1920, 1988, 68, 68, 68
        DC16 2040, 2032, 0, 1584, 1648, 1232, 1424, 1808, 1584, 1072, 0, 1920
        DC16 1152, 15600, 8208, 12240, 12240, 12240, 12240, 12240, 12240, 12240
        DC16 12240, 12240, 12240, 12240, 12240, 12240, 12240, 12240, 12240
        DC16 12240, 8208, 16368, 0, 1920, 1152, 15600, 8208, 8208, 8208, 8208
        DC16 8208
//   16 {
//   17    0x0000,0x0000,0x0000,0x001C,0x0020,0x0040,0x0040,0x0040, // 
//   18    0x0040,0x0040,0x0020,0x001C,0x0000,0x0000,0x0000,0x0000, // # 
//   19    0x0000,0x0000,0x0000,0xE000,0x1000,0x0800,0x0800,0x0800, // $ 
//   20    0x0C30,0x0C60,0x00C0,0x0180,0x0300,0x0630,0x0C30,0x0000, // %    
//   21    0x0800,0x0800,0x1000,0xE000,0x0000,0x0000,0x0000,0x0000, // & 
//   22    0x2010,0x2010,0x2010,0x2010,0x2010,0x2010,0x3FF0,0x0000, // ' 
//   23    0x0000,0x0000,0x0FC0,0x1FE0,0x3030,0x2010,0x0000,0x0000, // (    
//   24    0x0000,0x0000,0x2010,0x3030,0x1FE0,0x0FC0,0x0000,0x0000, // )    
//   25    0x0000,0x18C0,0x0D80,0x0700,0x0700,0x0D80,0x18C0,0x0000, // *  ¡Á
//   26    0x0000,0x0100,0x0100,0x07C0,0x07C0,0x0100,0x0100,0x0000, // +    
//   27    0x0000,0x0000,0x0000,0xFFFC,0x0000,0x0000,0x0000,0x0000, // , 
//   28    0x0000,0x0100,0x0100,0x0100,0x0100,0x0100,0x0100,0x0000, // -    
//   29    0x0000,0x0000,0x0000,0x0030,0x0030,0x0000,0x0000,0x0000, // .    
//   30    0x0030,0x0060,0x00C0,0x0180,0x0300,0x0600,0x0C00,0x0000, // /    
//   31    0x1FE0,0x3FF0,0x2090,0x2310,0x2410,0x3FF0,0x1FE0,0x0000, // 0    
//   32    0x0000,0x0810,0x1810,0x3FF0,0x3FF0,0x0010,0x0010,0x0000, // 1    
//   33    0x1070,0x30F0,0x2190,0x2310,0x2610,0x3830,0x1830,0x0000, // 2    
//   34    0x1020,0x3030,0x2210,0x2210,0x2210,0x3FF0,0x1DE0,0x0000, // 3    
//   35    0x0300,0x0700,0x0D00,0x1910,0x3FF0,0x3FF0,0x0110,0x0000, // 4    
//   36    0x3E20,0x3E30,0x2210,0x2210,0x2310,0x23F0,0x21E0,0x0000, // 5    
//   37    0x0FE0,0x1FF0,0x3210,0x2210,0x2210,0x03F0,0x01E0,0x0000, // 6    
//   38    0x3000,0x3000,0x20F0,0x21F0,0x2300,0x3E00,0x3C00,0x0000, // 7    
//   39    0x1DE0,0x3FF0,0x2210,0x2210,0x2210,0x3FF0,0x1DE0,0x0000, // 8    
//   40    0x1C00,0x3E10,0x2210,0x2210,0x2230,0x3FE0,0x1FC0,0x0000, // 9    
//   41    0x0000,0x0000,0x0000,0x0C60,0x0C60,0x0000,0x0000,0x0000, // :    
//   42    0x0040,0x0040,0x0040,0x0040,0x0040,0x0040,0x0040,0x0040, // ; 
//   43    0x0000,0x0100,0x0380,0x06C0,0x0C60,0x1830,0x1010,0x0000, // <    
//   44    0x0000,0x0090,0x0090,0x0090,0x0090,0x0090,0x0090,0x0000, // =    
//   45    0x0240,0x0240,0x0240,0x0240,0x0240,0x0240,0x0240,0x0000, // >    
//   46    0x0000,0x1010,0x1830,0x0C60,0x06C0,0x0380,0x0100,0x0000, // ?    
//   47    0x0FC0,0x1020,0x2790,0x2490,0x27D0,0x1050,0x0F80,0x0000, // @    
//   48    0x07F0,0x0FF0,0x1900,0x3100,0x1900,0x0FF0,0x07F0,0x0000, // A    
//   49    0x2010,0x3FF0,0x3FF0,0x2210,0x2210,0x3FF0,0x1DE0,0x0000, // B    
//   50    0x0FC0,0x1FE0,0x3030,0x2010,0x2010,0x3030,0x1860,0x0000, // C    
//   51    0x2010,0x3FF0,0x3FF0,0x2010,0x3030,0x1FE0,0x0FC0,0x0000, // D    
//   52    0x2010,0x3FF0,0x3FF0,0x2210,0x2710,0x3030,0x3870,0x0000, // E    
//   53    0x2010,0x3FF0,0x3FF0,0x2210,0x2700,0x3000,0x3800,0x0000, // F    
//   54    0x0FC0,0x1FE0,0x3030,0x2110,0x2110,0x31E0,0x19F0,0x0000, // G    
//   55    0x3FF0,0x3FF0,0x0200,0x0200,0x0200,0x3FF0,0x3FF0,0x0000, // H    
//   56    0x0000,0x0000,0x2010,0x3FF0,0x3FF0,0x2010,0x0000,0x0000, // I    
//   57    0x00E0,0x00F0,0x0010,0x2010,0x3FF0,0x3FE0,0x2000,0x0000, // J    
//   58    0x2010,0x3FF0,0x3FF0,0x0300,0x0F00,0x3CF0,0x3070,0x0000, // K    
//   59    0x2010,0x3FF0,0x3FF0,0x2010,0x0010,0x0030,0x0030,0x0000, // L    
//   60    0x3FF0,0x3FF0,0x1C00,0x0E00,0x1C00,0x3FF0,0x3FF0,0x0000, // M    
//   61    0x3FF0,0x3FF0,0x1C00,0x0E00,0x0700,0x3FF0,0x3FF0,0x0000, // N    
//   62    0x0FC0,0x1FE0,0x3030,0x2010,0x3030,0x1FE0,0x0FC0,0x0000, // O    
//   63    0x2010,0x3FF0,0x3FF0,0x2210,0x2200,0x3E00,0x1C00,0x0000, // P    
//   64    0x1FE0,0x3FF0,0x2010,0x2070,0x2030,0x3FF8,0x1FE8,0x0000, // Q    
//   65    0x2010,0x3FF0,0x3FF0,0x2200,0x2300,0x3FF0,0x1CF0,0x0000, // R    
//   66    0x1860,0x3C70,0x2610,0x2210,0x2310,0x39F0,0x18E0,0x0000, // S    
//   67    0x0000,0x3800,0x3010,0x3FF0,0x3FF0,0x3010,0x3800,0x0000, // T    
//   68    0x3FE0,0x3FF0,0x0010,0x0010,0x0010,0x3FF0,0x3FE0,0x0000, // U    
//   69    0x3F80,0x3FC0,0x0060,0x0030,0x0060,0x3FC0,0x3F80,0x0000, // V    
//   70    0x3FC0,0x3FF0,0x0070,0x01C0,0x0070,0x3FF0,0x3FC0,0x0000, // W    
//   71    0x3030,0x3CF0,0x0FC0,0x0300,0x0FC0,0x3CF0,0x3030,0x0000, // X    
//   72    0x0000,0x3C00,0x3E10,0x03F0,0x03F0,0x3E10,0x3C00,0x0000, // Y    
//   73    0x3870,0x30F0,0x2190,0x2310,0x2610,0x3C30,0x3870,0x0000, // Z    
//   74    0x0010,0x0030,0x0050,0x0190,0x0310,0x0C10,0x3FF0,0x0000, // [ 
//   75    0x0800,0x0800,0x0800,0x0800,0x0800,0x0800,0x0800,0x0800, // \ 
//   76    0x0000,0x0000,0x0000,0xFC7C,0x0280,0x0280,0x0100,0x0100, // ] 
//   77    0x0200,0x0400,0x0C00,0x1FF0,0x3FF0,0x0C00,0x0400,0x0200, // ^ 
//   78    0x0100,0x0080,0x00C0,0x3FE0,0x3FF0,0x00C0,0x0080,0x0100, // _ 
//   79    0x2010,0x2010,0x2010,0x2010,0x2010,0x2010,0x2010,0x2010, // ` 
//   80    0x00E0,0x05F0,0x0510,0x0510,0x07E0,0x03F0,0x0010,0x0000, // a    
//   81    0x2010,0x3FF0,0x3FE0,0x0210,0x0210,0x03F0,0x01E0,0x0000, // b    
//   82    0x03E0,0x07F0,0x0410,0x0410,0x0410,0x0630,0x0220,0x0000, // c    
//   83    0x01E0,0x03F0,0x0610,0x2410,0x3FF0,0x3FF0,0x0010,0x0000, // d    
//   84    0x03E0,0x07F0,0x0510,0x0510,0x0510,0x0730,0x0320,0x0000, // e    
//   85    0x0000,0x0210,0x1FF0,0x3FF0,0x2210,0x3000,0x1800,0x0000, // f    
//   86    0x03C8,0x07EC,0x0424,0x0424,0x03FC,0x07F8,0x0400,0x0000, // g    
//   87    0x2010,0x3FF0,0x3FF0,0x0220,0x0400,0x07F0,0x03F0,0x0000, // h    
//   88    0x0000,0x0000,0x0410,0x37F0,0x37F0,0x0010,0x0000,0x0000, // i    
//   89    0x0000,0x0018,0x001C,0x0404,0x37FC,0x37F8,0x0400,0x0000, // j    
//   90    0x2010,0x3FF0,0x3FF0,0x2180,0x03C0,0x0670,0x0430,0x0000, // k    
//   91    0x0000,0x0000,0x2010,0x3FF0,0x3FF0,0x0010,0x0000,0x0000, // l    
//   92    0x07F0,0x07F0,0x0600,0x03F0,0x0600,0x07F0,0x07F0,0x0000, // m    
//   93    0x0400,0x07F0,0x03F0,0x0400,0x0400,0x07F0,0x03F0,0x0000, // n    
//   94    0x03E0,0x07F0,0x0410,0x0410,0x0410,0x07F0,0x03E0,0x0000, // o    
//   95    0x0404,0x07FC,0x03FC,0x0444,0x0440,0x07C0,0x0380,0x0000, // p    
//   96    0x0380,0x07C0,0x0440,0x0444,0x07FC,0x03FC,0x0404,0x0000, // q    
//   97    0x0410,0x07F0,0x03F0,0x0610,0x0400,0x0600,0x0300,0x0000, // r    
//   98    0x0000,0x0220,0x0730,0x0590,0x0490,0x06F0,0x0260,0x0000, // s    
//   99    0x0400,0x0400,0x1FE0,0x3FF0,0x0410,0x0430,0x0020,0x0000, // t    
//  100    0x07E0,0x07F0,0x0010,0x0010,0x07E0,0x07F0,0x0010,0x0000, // u    
//  101    0x0000,0x07C0,0x07E0,0x0030,0x0030,0x07E0,0x07C0,0x0000, // v    
//  102    0x07E0,0x07F0,0x0030,0x00E0,0x0030,0x07F0,0x07E0,0x0000, // w    
//  103    0x0410,0x0630,0x03E0,0x01C0,0x03E0,0x0630,0x0410,0x0000, // x    
//  104    0x0780,0x07C4,0x0044,0x0044,0x0044,0x07F8,0x07F0,0x0000, // y    
//  105    0x0630,0x0670,0x04D0,0x0590,0x0710,0x0630,0x0430,0x0000, // z    
//  106    0x0780,0x0480,0x3CF0,0x2010,0x2FD0,0x2FD0,0x2FD0,0x2FD0, // { 
//  107    0x2FD0,0x2FD0,0x2FD0,0x2FD0,0x2FD0,0x2FD0,0x2FD0,0x2FD0, // | 
//  108    0x2FD0,0x2FD0,0x2FD0,0x2FD0,0x2FD0,0x2010,0x3FF0,0x0000, // } 
//  109    0x0780,0x0480,0x3CF0,0x2010,0x2010,0x2010,0x2010,0x2010 // ~ 
//  110 };
//  111 
//  112 /*******************************************************************************
//  113  LCD_Initial: 400x240 LCDÏÔÊ¾Ä£¿é³õÊ¼»¯¡£ 
//  114  			  Init the 400X240 LCD module
//  115 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function LCD_Initial
        THUMB
//  116 void LCD_Initial(void)
//  117 {   
LCD_Initial:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
//  118   //------------------------- Reset LCD Driver ---------------------//
//  119   LCD_RS_HIGH();
        LDR.N    R5,??DataTable12  ;; 0x40011410
//  120   LCD_nRST_HIGH(); 
//  121   Delayms(1);           //RST=1£¬Delay 1ms      
//  122   LCD_nRST_LOW(); 
        LDR.N    R7,??DataTable11  ;; 0x40011414
        MOVS     R0,#+1
        LSRS     R6,R5,#+18
        STR      R6,[R5, #+0]
        LSRS     R4,R5,#+19
        STR      R4,[R5, #+0]
        BL       Delayms
        STR      R4,[R7, #+0]
//  123   Delayms(10);          //RST=0 Reset LCD£¬Delay 1ms      
        MOVS     R0,#+10
        BL       Delayms
//  124   LCD_nRST_HIGH(); 
        STR      R4,[R5, #+0]
//  125   Delayms(50);          //RST=1£¬Delay 5 ms  
        MOVS     R0,#+50
        BL       Delayms
//  126   LCD_RD_Type();
        BL       LCD_RD_Type
//  127   if(LCD_Type == 0x02049327){
        LDR.N    R0,??DataTable13  ;; LCD_Type
        LDR.N    R1,??DataTable3  ;; 0x2049327
        MOVS     R4,#+1610612736
        LDR      R0,[R0, #+0]
        CMP      R0,R1
        BNE.N    ??LCD_Initial_0
//  128  //----------- ILI9327_HSD3.0 Internal Register Initial -----------//         
//  129     LCD_WR_Ctrl(0xE9); 
        MOVS     R0,#+233
        BL       LCD_WR_Ctrl
//  130     LCD_PORT =  0x20; 
        MOVS     R0,#+32
        STRH     R0,[R4, #+0]
//  131     LCD_WR_Ctrl(0x11);   //Exit Sleep  
        MOVS     R0,#+17
        BL       LCD_WR_Ctrl
//  132     Delayms(100);           
        MOVS     R0,#+100
        BL       Delayms
//  133     LCD_WR_Ctrl(0xD1); 
        MOVS     R0,#+209
        BL       LCD_WR_Ctrl
//  134     LCD_PORT =  0x00; 
        MOVS     R5,#+0
        STRH     R5,[R4, #+0]
//  135     LCD_PORT =  0x5E; 
        MOVS     R0,#+94
        STRH     R0,[R4, #+0]
//  136     LCD_PORT =  0x17; //1F 
        MOVS     R0,#+23
        STRH     R0,[R4, #+0]
//  137 
//  138     LCD_WR_Ctrl(0xD0); 
        MOVS     R0,#+208
        BL       LCD_WR_Ctrl
//  139     LCD_PORT =  0x07; 
        MOVS     R0,#+7
        STRH     R0,[R4, #+0]
//  140     LCD_PORT =  0x07; 
        STRH     R0,[R4, #+0]
//  141     LCD_PORT =  0x0C; //80 
        MOVS     R0,#+12
        STRH     R0,[R4, #+0]
//  142   
//  143     LCD_WR_Ctrl(0x36); 
        MOVS     R0,#+54
        BL       LCD_WR_Ctrl
//  144     LCD_PORT =  0x40; // 48
        MOVS     R0,#+64
        MOV      R8,R0
        STRH     R8,[R4, #+0]
//  145   
//  146     LCD_WR_Ctrl(0x0C); 
        MOVS     R0,#+12
        BL       LCD_WR_Ctrl
//  147     LCD_PORT =  0x55; 
        MOVS     R6,#+85
        STRH     R6,[R4, #+0]
//  148   
//  149     LCD_WR_Ctrl(0x3A); 
        MOVS     R0,#+58
        BL       LCD_WR_Ctrl
//  150     LCD_PORT =  0x55; 
        STRH     R6,[R4, #+0]
//  151   
//  152     LCD_WR_Ctrl(0xC1); 
        MOVS     R0,#+193
        BL       LCD_WR_Ctrl
//  153     LCD_PORT =  0x10; 
        MOVS     R0,#+16
        STRH     R0,[R4, #+0]
//  154     LCD_PORT =  0x10; 
        STRH     R0,[R4, #+0]
//  155     LCD_PORT =  0x02; 
        MOVS     R6,#+2
        STRH     R6,[R4, #+0]
//  156     LCD_PORT =  0x02; 
        STRH     R6,[R4, #+0]
//  157   
//  158     LCD_WR_Ctrl(0xC0);   //Set Default Gamma 
        MOVS     R0,#+192
        BL       LCD_WR_Ctrl
//  159     LCD_PORT =  0x00; 
        STRH     R5,[R4, #+0]
//  160     LCD_PORT =  0x35; 
        MOVS     R0,#+53
        STRH     R0,[R4, #+0]
//  161     LCD_PORT =  0x00; 
        STRH     R5,[R4, #+0]
//  162     LCD_PORT =  0x00; 
        STRH     R5,[R4, #+0]
//  163     LCD_PORT =  0x01; 
        MOVS     R7,#+1
        STRH     R7,[R4, #+0]
//  164     LCD_PORT =  0x02; 
        STRH     R6,[R4, #+0]
//  165   
//  166     LCD_WR_Ctrl(0xC5);   //Set frame rate  
        MOVS     R0,#+197
        BL       LCD_WR_Ctrl
//  167     LCD_PORT =  0x01; 
        STRH     R7,[R4, #+0]
//  168 
//  169     LCD_WR_Ctrl(0xD2);   //power setting
        MOVS     R0,#+210
        BL       LCD_WR_Ctrl
//  170     LCD_PORT =  0x01; 
        STRH     R7,[R4, #+0]
//  171     LCD_PORT =  0x22; 
        MOVS     R0,#+34
        STRH     R0,[R4, #+0]
//  172 
//  173     LCD_WR_Ctrl(0xC8);   //Set Gamma 
        MOVS     R0,#+200
        BL       LCD_WR_Ctrl
//  174     LCD_PORT =  0x01; 
        STRH     R7,[R4, #+0]
//  175     LCD_PORT =  0x73; 
        MOVS     R0,#+115
        STRH     R0,[R4, #+0]
//  176     LCD_PORT =  0x37; 
        MOVS     R0,#+55
        STRH     R0,[R4, #+0]
//  177     LCD_PORT =  0x00; 
        STRH     R5,[R4, #+0]
//  178     LCD_PORT =  0x0F; 
        MOVS     R0,#+15
        STRH     R0,[R4, #+0]
//  179     LCD_PORT =  0x02; 
        STRH     R6,[R4, #+0]
//  180     LCD_PORT =  0x04; 
        MOVS     R1,#+4
        STRH     R1,[R4, #+0]
//  181     LCD_PORT =  0x40; 
        STRH     R8,[R4, #+0]
//  182     LCD_PORT =  0x67; 
        MOVS     R1,#+103
        STRH     R1,[R4, #+0]
//  183     LCD_PORT =  0x00; 
        STRH     R5,[R4, #+0]
//  184     LCD_PORT =  0x02; 
        STRH     R6,[R4, #+0]
//  185     LCD_PORT =  0x0F; 
        STRH     R0,[R4, #+0]
//  186     LCD_PORT =  0x08; 
        MOVS     R0,#+8
        STRH     R0,[R4, #+0]
//  187     LCD_PORT =  0x80; 
        MOVS     R0,#+128
        STRH     R0,[R4, #+0]
//  188     LCD_PORT =  0x00; 
        STRH     R5,[R4, #+0]
//  189   
//  190     LCD_WR_Ctrl(0x29);   //display on 
        MOVS     R0,#+41
        BL       LCD_WR_Ctrl
//  191     LCD_WR_Ctrl(0x2C); 
        MOVS     R0,#+44
        BL       LCD_WR_Ctrl
        B.N      ??LCD_Initial_1
//  192   } else {
//  193  //----------------R61509V_CPT30 Internal Register Initial------------//         
//  194     LCD_WR_REG(0x0000, 0x0000); 
??LCD_Initial_0:
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       LCD_WR_REG
//  195     LCD_WR_REG(0x0000, 0x0000); 
        MOVS     R1,#+0
        MOV      R0,R1
        BL       LCD_WR_REG
//  196     LCD_WR_REG(0x0000, 0x0000); 
        MOVS     R1,#+0
        MOV      R0,R1
        BL       LCD_WR_REG
//  197     LCD_WR_REG(0x0000, 0x0000); 
        MOVS     R1,#+0
        MOV      R0,R1
        BL       LCD_WR_REG
//  198     Delayms(10); 
        MOVS     R0,#+10
        BL       Delayms
//  199     LCD_WR_REG(0x0600, 0x0001);
        MOVS     R1,#+1
        LSRS     R0,R4,#+20
        BL       LCD_WR_REG
//  200     Delayms(10);
        MOVS     R0,#+10
        BL       Delayms
//  201     LCD_WR_REG(0x06f0, 0x0040);
        MOVS     R1,#+64
        MOVS     R0,#+1776
        BL       LCD_WR_REG
//  202     Delayms(10);
        MOVS     R0,#+10
        BL       Delayms
//  203     LCD_WR_REG(0x0400, 0x6200); 
        MOVS     R1,#+25088
        LSRS     R0,R5,#+20
        BL       LCD_WR_REG
//  204     LCD_WR_REG(0x0008, 0x0808); 
        LDR.N    R1,??LCD_Initial_2  ;; 0x808
        MOVS     R0,#+8
        BL       LCD_WR_REG
//  205     LCD_WR_REG(0x0001, 0x0100); 
        LSRS     R1,R5,#+22
        MOVS     R0,#+1
        BL       LCD_WR_REG
//  206     LCD_WR_REG(0x0002, 0x0100); 
        LSRS     R1,R5,#+22
        MOVS     R0,#+2
        BL       LCD_WR_REG
//  207     LCD_WR_REG(0x0003, 0x0030);   //LCD_WR_REG(0x0003, 0x1030); 
        MOVS     R1,#+48
        MOVS     R0,#+3
        BL       LCD_WR_REG
//  208     LCD_WR_REG(0x0009, 0x0001); 
        MOVS     R1,#+1
        MOVS     R0,#+9
        BL       LCD_WR_REG
//  209     LCD_WR_REG(0x000C, 0x0000);
        MOVS     R1,#+0
        MOVS     R0,#+12
        BL       LCD_WR_REG
//  210     LCD_WR_REG(0x0090, 0x8000);
        LSLS     R1,R6,#+3
        MOVS     R0,#+144
        BL       LCD_WR_REG
//  211     LCD_WR_REG(0x000F, 0x0000);
        MOVS     R1,#+0
        MOVS     R0,#+15
        BL       LCD_WR_REG
//  212     LCD_WR_REG(0x0010, 0x0016);
        MOVS     R1,#+22
        MOVS     R0,#+16
        BL       LCD_WR_REG
//  213     LCD_WR_REG(0x0011, 0x0101);
        LDR.N    R0,??LCD_Initial_2+0x4  ;; 0x101
        MOV      R8,R0
        MOV      R1,R8
        MOVS     R0,#+17
        BL       LCD_WR_REG
//  214     LCD_WR_REG(0x0012, 0x0000);
        MOVS     R1,#+0
        MOVS     R0,#+18
        BL       LCD_WR_REG
//  215     LCD_WR_REG(0x0013, 0x0001);
        MOVS     R1,#+1
        MOVS     R0,#+19
        BL       LCD_WR_REG
//  216     LCD_WR_REG(0x0100, 0x0330);
        MOVS     R1,#+816
        LSRS     R0,R5,#+22
        BL       LCD_WR_REG
//  217     LCD_WR_REG(0x0101, 0x0237);
        LDR.N    R1,??LCD_Initial_2+0x8  ;; 0x237
        MOV      R0,R8
        BL       LCD_WR_REG
//  218     LCD_WR_REG(0x0103, 0x0F00); 
        LDR.N    R0,??LCD_Initial_2+0xC  ;; 0x103
        MOVS     R1,#+3840
        BL       LCD_WR_REG
//  219     LCD_WR_REG(0x0280, 0x6B00); 
        MOVS     R1,#+27392
        MOVS     R0,#+640
        BL       LCD_WR_REG
//  220     LCD_WR_REG(0x0102, 0xC1B0);
        LDR.N    R1,??LCD_Initial_2+0x10  ;; 0xc1b0
        MOVS     R0,#+258
        BL       LCD_WR_REG
//  221     Delayms(100); 
        MOVS     R0,#+100
        BL       Delayms
//  222     LCD_WR_REG(0x0300, 0x0C00); 
        LSRS     R1,R4,#+19
        LSRS     R0,R1,#+2
        BL       LCD_WR_REG
//  223     LCD_WR_REG(0x0301, 0x5A0B); 
        LDR.N    R1,??LCD_Initial_2+0x14  ;; 0x5a0b
        LDR.N    R0,??LCD_Initial_2+0x18  ;; 0x301
        BL       LCD_WR_REG
//  224     LCD_WR_REG(0x0302, 0x0906); 
        LDR.N    R1,??LCD_Initial_2+0x1C  ;; 0x906
        LDR.N    R0,??LCD_Initial_2+0x20  ;; 0x302
        BL       LCD_WR_REG
//  225     LCD_WR_REG(0x0303, 0x1017); 
        LDR.N    R1,??LCD_Initial_2+0x24  ;; 0x1017
        LDR.N    R0,??LCD_Initial_2+0x28  ;; 0x303
        BL       LCD_WR_REG
//  226     LCD_WR_REG(0x0304, 0x2300); 
        MOVS     R1,#+8960
        MOVS     R0,#+772
        BL       LCD_WR_REG
//  227     LCD_WR_REG(0x0305, 0x1700); 
        LDR.N    R0,??LCD_Initial_2+0x2C  ;; 0x305
        MOVS     R1,#+5888
        BL       LCD_WR_REG
//  228     LCD_WR_REG(0x0306, 0x6309);
        LDR.N    R1,??LCD_Initial_2+0x30  ;; 0x6309
        LDR.N    R0,??LCD_Initial_2+0x34  ;; 0x306
        BL       LCD_WR_REG
//  229     LCD_WR_REG(0x0307, 0x0C09);
        LDR.N    R1,??LCD_Initial_2+0x38  ;; 0xc09
        LDR.N    R0,??LCD_Initial_2+0x3C  ;; 0x307
        BL       LCD_WR_REG
//  230     LCD_WR_REG(0x0308, 0x100C);
        LDR.N    R1,??LCD_Initial_2+0x40  ;; 0x100c
        MOVS     R0,#+776
        BL       LCD_WR_REG
//  231     LCD_WR_REG(0x0309, 0x2232);
        LDR.N    R1,??LCD_Initial_2+0x44  ;; 0x2232
        LDR.N    R0,??LCD_Initial_2+0x48  ;; 0x309
        BL       LCD_WR_REG
//  232   
//  233     LCD_WR_REG(0x0210, 0x0000);
        MOVS     R1,#+0
        MOVS     R0,#+528
        BL       LCD_WR_REG
//  234     LCD_WR_REG(0x0211, 0x00EF);
        LDR.N    R0,??DataTable4  ;; 0x211
        MOVS     R1,#+239
        BL       LCD_WR_REG
//  235     LCD_WR_REG(0x0212, 0x0000);
        LDR.N    R0,??DataTable5  ;; 0x212
        MOVS     R1,#+0
        BL       LCD_WR_REG
//  236     LCD_WR_REG(0x0213, 0x018F);
        LDR.N    R1,??LCD_Initial_2+0x4C  ;; 0x18f
        LDR.N    R0,??DataTable6  ;; 0x213
        BL       LCD_WR_REG
//  237     LCD_WR_REG(0x0500, 0x0000);
        MOVS     R1,#+0
        MOVS     R0,#+1280
        BL       LCD_WR_REG
//  238     LCD_WR_REG(0x0501, 0x0000);
        MOVS     R1,#+0
        LDR.N    R0,??LCD_Initial_2+0x50  ;; 0x501
        BL       LCD_WR_REG
//  239     LCD_WR_REG(0x0502, 0x0005);
        LDR.N    R0,??LCD_Initial_2+0x54  ;; 0x502
        MOVS     R1,#+5
        BL       LCD_WR_REG
//  240     LCD_WR_REG(0x0401, 0x0001);
        LDR.N    R0,??LCD_Initial_2+0x58  ;; 0x401
        MOVS     R1,#+1
        BL       LCD_WR_REG
//  241     LCD_WR_REG(0x0404, 0x0000);
        LDR.N    R0,??LCD_Initial_2+0x5C  ;; 0x404
        MOVS     R1,#+0
        BL       LCD_WR_REG
//  242     Delayms(100);
        MOVS     R0,#+100
        BL       Delayms
//  243     LCD_WR_REG(0x0007, 0x0100);
        LSRS     R1,R5,#+22
        MOVS     R0,#+7
        BL       LCD_WR_REG
//  244     Delayms(100);
        MOVS     R0,#+100
        BL       Delayms
//  245     LCD_WR_REG(0x0200, 0x0000);
        MOVS     R1,#+0
        LSRS     R0,R5,#+21
        BL       LCD_WR_REG
//  246     LCD_WR_REG(0x0201, 0x0000); 
        LDR.N    R0,??DataTable18  ;; 0x201
        MOVS     R1,#+0
        BL       LCD_WR_REG
//  247 
//  248     LCD_RS_LOW();
//  249     LCD_PORT = 0x0202;     //Reg. Addr.
        LDR.N    R0,??DataTable20  ;; 0x202
        STR      R6,[R7, #+0]
        STRH     R0,[R4, #+0]
//  250     LCD_RS_HIGH();
        STR      R6,[R5, #+0]
//  251   }
//  252 }
??LCD_Initial_1:
        POP      {R4-R8,PC}       ;; return
        DATA
??LCD_Initial_2:
        DC32     0x808
        DC32     0x101
        DC32     0x237
        DC32     0x103
        DC32     0xc1b0
        DC32     0x5a0b
        DC32     0x301
        DC32     0x906
        DC32     0x302
        DC32     0x1017
        DC32     0x303
        DC32     0x305
        DC32     0x6309
        DC32     0x306
        DC32     0xc09
        DC32     0x307
        DC32     0x100c
        DC32     0x2232
        DC32     0x309
        DC32     0x18f
        DC32     0x501
        DC32     0x502
        DC32     0x401
        DC32     0x404
        CFI EndBlock cfiBlock0

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     0x2049327

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     0x211

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable5:
        DC32     0x212

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     0x213
//  253 /*******************************************************************************
//  254  LCD_WR_REG: ÉèÖÃLCDÄ£¿éÉÏÖ¸¶¨¼Ä´æÆ÷µÄÖµ¡£ ÊäÈë: ¼Ä´æÆ÷µØÖ·¡¢¼Ä´æÆ÷Öµ¡£
//  255  			Set the register on lcd module. Input: Register address  ,value
//  256 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function LCD_WR_REG
        THUMB
//  257 void LCD_WR_REG(u16 Reg, u16 Data) 
//  258 {
//  259   LCD_RS_LOW();
LCD_WR_REG:
        LDR.N    R3,??DataTable11  ;; 0x40011414
        MOVS     R2,#+4096
        STR      R2,[R3, #+0]
//  260   LCD_PORT = Reg;        //Reg. Addr.
        MOVS     R3,#+1610612736
        STRH     R0,[R3, #+0]
//  261   LCD_RS_HIGH();
        LDR.N    R0,??DataTable12  ;; 0x40011410
        STR      R2,[R0, #+0]
//  262   LCD_PORT  = Data;       //Reg. Data 
        STRH     R1,[R3, #+0]
//  263 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock1
//  264 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function LCD_EnterSleep_ILI9327
        THUMB
//  265 void LCD_EnterSleep_ILI9327(void) 
//  266 { 
//  267   LCD_WR_Ctrl(0x10); 
LCD_EnterSleep_ILI9327:
        MOVS     R0,#+16
        B.N      LCD_WR_Ctrl
        CFI EndBlock cfiBlock2
//  268 } 
//  269 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function LCD_ExitSleep_ILI9327
        THUMB
//  270 void LCD_ExitSleep_ILI9327(void) 
//  271 { 
//  272   LCD_WR_Ctrl(0x11); 
LCD_ExitSleep_ILI9327:
        MOVS     R0,#+17
        Nop      
        CFI EndBlock cfiBlock3
//  273 }
        REQUIRE LCD_WR_Ctrl
        ;; // Fall through to label LCD_WR_Ctrl
//  274 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function LCD_WR_Ctrl
        THUMB
//  275 void LCD_WR_Ctrl(u16 Reg) 
//  276 {
//  277   LCD_RS_LOW();
LCD_WR_Ctrl:
        LDR.N    R2,??DataTable11  ;; 0x40011414
        MOVS     R1,#+4096
        STR      R1,[R2, #+0]
//  278   LCD_PORT = Reg;        //Reg. Addr.
        MOVS     R2,#+1610612736
        STRH     R0,[R2, #+0]
//  279   LCD_RS_HIGH();
        LDR.N    R0,??DataTable12  ;; 0x40011410
        STR      R1,[R0, #+0]
//  280 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock4

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable11:
        DC32     0x40011414

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable12:
        DC32     0x40011410

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function LCD_RD_Type
        THUMB
//  281 void LCD_RD_Type(void) 
//  282 { 
LCD_RD_Type:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  283   LCD_WR_Ctrl(0xEF);
        MOVS     R0,#+239
        BL       LCD_WR_Ctrl
//  284   LCD_Type  = (LCD_PORT&0xFF);
        MOVS     R0,#+1610612736
        LDRH     R0,[R0, #+0]
//  285   LCD_Type  = (LCD_PORT&0xFF)<<24;
        LDR.N    R0,??DataTable13  ;; LCD_Type
        MOVS     R1,#+1610612736
        LDRH     R1,[R1, #+0]
        MOVS     R2,#+1610612736
        LSLS     R1,R1,#+24
        STR      R1,[R0, #+0]
        LDRH     R2,[R2, #+0]
        UXTB     R2,R2
        ORRS     R1,R1,R2, LSL #+16
//  286   LCD_Type |= (LCD_PORT&0xFF)<<16;
//  287   LCD_Type |= (LCD_PORT&0xFF)<<8;
        MOVS     R2,#+1610612736
        STR      R1,[R0, #+0]
        LDRH     R2,[R2, #+0]
        UXTB     R2,R2
        ORRS     R1,R1,R2, LSL #+8
//  288   LCD_Type |= (LCD_PORT&0xFF);
        MOVS     R2,#+1610612736
        STR      R1,[R0, #+0]
        LDRH     R2,[R2, #+0]
        UXTB     R2,R2
        ORRS     R2,R2,R1
        STR      R2,[R0, #+0]
//  289 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable13:
        DC32     LCD_Type
//  290 /*
//  291 u16 LCD_RD_Data(void) 
//  292 {
//  293   u16 Data;
//  294   
//  295   Data  = LCD_PORT; 
//  296   Data  = LCD_PORT; 
//  297   return Data;      
//  298 }
//  299 */

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function Get_Pixl
        THUMB
//  300 u16 Get_Pixl(void)
//  301 { 
//  302   u16 Data;
//  303   
//  304   if(LCD_Type == 0x02049327){
Get_Pixl:
        LDR.N    R0,??DataTable22  ;; LCD_Type
        LDR.N    R1,??DataTable23  ;; 0x2049327
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R0,[R0, #+0]
        CMP      R0,R1
        BNE.N    ??Get_Pixl_0
//  305     LCD_WR_Ctrl(0x2E);
        MOVS     R0,#+46
        BL       LCD_WR_Ctrl
//  306 //    Data = LCD_GetPixl();
//  307     Data  = LCD_PORT; 
        MOVS     R0,#+1610612736
        LDRH     R0,[R0, #+0]
//  308     Data  = LCD_PORT; 
        MOVS     R0,#+1610612736
        LDRH     R4,[R0, #+0]
//  309     LCD_WR_Ctrl(0x2C);
        MOVS     R0,#+44
        BL       LCD_WR_Ctrl
        B.N      ??Get_Pixl_1
//  310   } else {
//  311     Data  = LCD_PORT; 
??Get_Pixl_0:
        MOVS     R0,#+1610612736
        LDRH     R0,[R0, #+0]
//  312     Data  = LCD_PORT; 
        MOVS     R0,#+1610612736
        LDRH     R4,[R0, #+0]
//  313 //    return LCD_GetPixl();
//  314   }
//  315   return Data;
??Get_Pixl_1:
        MOVS     R0,R4
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock6
//  316 }
//  317 
//  318 /*******************************************************************************
//  319  delayms: ºÁÃë£¨mS£©ÑÓÊ±³ÌÐò¡£ ÊäÈë: ÑÓÊ±µÈ´ýµÄºÁÃëÊýÖµ£¨ÔÚ72MHzÖ÷ÆµÇé¿öÏÂ£©
//  320  		delayms.Input: ms to delay(72M main frequency)
//  321 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function Delayms
        THUMB
//  322 void Delayms(u16 mS) 
//  323 { 
//  324   Delay_Cnt = mS;
Delayms:
        LDR.N    R1,??Delayms_0   ;; Delay_Cnt
        STRH     R0,[R1, #+0]
//  325   while (Delay_Cnt > 0){}
??Delayms_1:
        LDRH     R0,[R1, #+0]
        CMP      R0,#+0
        BNE.N    ??Delayms_1
//  326 }
        BX       LR               ;; return
        DATA
??Delayms_0:
        DC32     Delay_Cnt
        CFI EndBlock cfiBlock7
//  327 /*******************************************************************************
//  328  Point_SCR : Ö¸¶¨ÏÔÊ¾Î»ÖÃ for R61509V LCD   ÊäÈë: X¡¢Y×ø±ê 
//  329  			Set the position to show  Input :X.Y position
//  330 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function Point_SCR
        THUMB
//  331 void Point_SCR(u16 x0, u16 y0)						
//  332 { 
Point_SCR:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOVS     R5,R0
//  333   __LCD_DMA_Ready();
//  334   if(LCD_Type == 0x02049327){
        MOVS     R4,#+1610612736
        MOVS     R6,R1
        _BLF     __LCD_DMA_Ready,??__LCD_DMA_Ready??rT
        LDR.N    R0,??DataTable22  ;; LCD_Type
        LDR.N    R1,??DataTable23  ;; 0x2049327
        LDR      R0,[R0, #+0]
        CMP      R0,R1
        BNE.N    ??Point_SCR_0
//  335     LCD_WR_Ctrl(0x2A);      // Block End X Address
        MOVS     R0,#+42
        BL       LCD_WR_Ctrl
//  336     LCD_PORT = (0x00); 
        MOVS     R0,#+0
        STRH     R0,[R4, #+0]
//  337     LCD_PORT = (y0 & 0xFF); 
        UXTB     R1,R6
        STRH     R1,[R4, #+0]
//  338     LCD_PORT = (0x00); 
        STRH     R0,[R4, #+0]
//  339     LCD_PORT = (0xEF); 
        MOVS     R0,#+239
        STRH     R0,[R4, #+0]
//  340     LCD_WR_Ctrl(0x2B);      // Block End Y Address
        MOVS     R0,#+43
        BL       LCD_WR_Ctrl
//  341     LCD_PORT = (x0 >> 8); 
        LSRS     R0,R5,#+8
        STRH     R0,[R4, #+0]
//  342     LCD_PORT = (x0 & 0xFF); 
        UXTB     R0,R5
        STRH     R0,[R4, #+0]
//  343     LCD_PORT = (399 >> 8); 
        MOVS     R0,#+1
        STRH     R0,[R4, #+0]
//  344     LCD_PORT = (399 & 0xFF); 
        MOVS     R0,#+143
        STRH     R0,[R4, #+0]
//  345     LCD_WR_Ctrl(0x2C); 
        MOVS     R0,#+44
        BL       LCD_WR_Ctrl
        POP      {R4-R6,PC}
//  346   } else {
//  347     LCD_WR_REG(0x0200,y0);             
??Point_SCR_0:
        MOVS     R1,R6
        MOVS     R0,#+512
        BL       LCD_WR_REG
//  348     LCD_WR_REG(0x0201,x0);             
        LDR.N    R0,??DataTable18  ;; 0x201
        MOVS     R1,R5
        BL       LCD_WR_REG
//  349     LCD_RS_LOW();
        LDR.N    R1,??DataTable28  ;; 0x40011414
        MOVS     R0,#+4096
        STR      R0,[R1, #+0]
//  350     LCD_PORT = 0x0202;     //Reg. Addr.
        LDR.N    R1,??DataTable20  ;; 0x202
        STRH     R1,[R4, #+0]
//  351     LCD_RS_HIGH();
        LDR.N    R1,??DataTable30  ;; 0x40011410
        STR      R0,[R1, #+0]
//  352   }
//  353 }
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable18:
        DC32     0x201

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable20:
        DC32     0x202
//  354 /*******************************************************************************
//  355  Clear_Screen: ÇåLCDÏÔÊ¾Æ÷ÆÁÄ»¡£ 
//  356  				Clear all the Screen
//  357 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function Clear_Screen
        THUMB
//  358 void Clear_Screen(u16 Color)						
//  359 { 
Clear_Screen:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  360   Fill_Buffer = Color;
        LDR.N    R4,??Clear_Screen_0  ;; Fill_Buffer
//  361   Point_SCR(0, 0); 
//  362   __LCD_Fill(&Fill_Buffer,240*200);//Clear Half Screen
        LDR.N    R5,??Clear_Screen_0+0x4  ;; 0xbb80
        MOVS     R1,#+0
        STRH     R0,[R4, #+0]
        MOVS     R0,#+0
        BL       Point_SCR
        MOVS     R1,R5
        MOVS     R0,R4
        _BLF     __LCD_Fill,??__LCD_Fill??rT
//  363   __LCD_DMA_Ready();
        _BLF     __LCD_DMA_Ready,??__LCD_DMA_Ready??rT
//  364   __LCD_Fill(&Fill_Buffer,240*200);//Clear Half Screen
        MOVS     R1,R5
        MOVS     R0,R4
        POP      {R4,R5,LR}       ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        _BF.W    __LCD_Fill,??__LCD_Fill??rT
        DATA
??Clear_Screen_0:
        DC32     Fill_Buffer
        DC32     0xbb80
        CFI EndBlock cfiBlock9
//  365 }
//  366 /*******************************************************************************
//  367  Display_Str: ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾×Ö·û´®   ÊäÈë: X¡¢Y×ø±ê£¬ÑÕÉ«Öµ£¬ÏÔÊ¾Ä£Ê½£¬×Ö·û´® 
//  368  			  Show a char in a specified positon Input:X,Y ,show color, show mode , string to show
//  369 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function Get_TAB_8x14
        THUMB
//  370 u16 Get_TAB_8x14(u8 Code, u16 Row)
//  371 {
//  372   return Char_TAB_8x14[((Code-0x22)*8)+Row];
Get_TAB_8x14:
        LDR.N    R2,??Get_TAB_8x14_0  ;; 0xfffffffffffffde0
        ADDS     R0,R1,R0, LSL #+3
        LDR.N    R1,??Get_TAB_8x14_0+0x4  ;; Char_TAB_8x14
        ADDS     R0,R1,R0, LSL #+1
        LDRH     R0,[R0, R2]
        BX       LR               ;; return
        DATA
??Get_TAB_8x14_0:
        DC32     0xfffffffffffffde0
        DC32     Char_TAB_8x14
        CFI EndBlock cfiBlock10
//  373 }
//  374 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function Display_Str
        THUMB
//  375 void Display_Str(u16 x0, u16 y0, u16 Color, u8 Mode, u8 *s)
//  376 { 
Display_Str:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        MOV      R8,R1
        MOVS     R4,R3
        MOVS     R6,R0
//  377   signed short i, j, b; 
//  378   Point_SCR(x0, y0);
//  379   for (j=0; j<14;++j){ 
        MOVS     R5,#+0
        MOV      R9,R2
        BL       Point_SCR
//  380     if(Mode==0) __LCD_SetPixl(BLACK);   //Normal replace Display
??Display_Str_0:
        CBNZ     R4,??Display_Str_1
        MOVS     R0,#+0
        _BLF     __LCD_SetPixl,??__LCD_SetPixl??rT
        B.N      ??Display_Str_2
//  381     if(Mode==1) __LCD_SetPixl(Color);   //Inverse replace Display
??Display_Str_1:
        CMP      R4,#+1
        ITT     EQ 
        MOVEQ    R0,R9
        _BLFEQ   __LCD_SetPixl,??__LCD_SetPixl??rT
//  382   }
??Display_Str_2:
        ADDS     R5,R5,#+1
        CMP      R5,#+14
        BLT.N    ??Display_Str_0
//  383   x0++;                            // Ã¿Ò»¸ö×Ö·û´®Ç°Ôö¼ÓÒ»¿Õ°×ÁÐ //Add a blank in font of each string
        LDR      R0,[SP, #+36]
        ADDS     R6,R6,#+1
        MOV      R11,R6
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BEQ.N    ??Display_Str_3
//  384   while (*s!=0) {
//  385     for(i=0;i<8;++i){
??Display_Str_4:
        MOVS     R6,#+0
//  386       Point_SCR(x0+i, y0);
??Display_Str_5:
        MOV      R1,R8
        MOV      R0,R11
        ADDS     R0,R0,R6
        UXTH     R0,R0
        BL       Point_SCR
//  387       if((*s==0x20)||(*s==0x21)) b=0x0000;
        LDR      R0,[SP, #+36]
        LDRB     R0,[R0, #+0]
        CMP      R0,#+32
        BEQ.N    ??Display_Str_6
        CMP      R0,#+33
        BNE.N    ??Display_Str_7
??Display_Str_6:
        MOVS     R7,#+0
//  388       else                       b=Get_TAB_8x14(*s, i);
//  389       if((*s==0x21)&&(i==4)) break;
        CMP      R0,#+33
        BNE.N    ??Display_Str_8
        CMP      R6,#+4
        BEQ.N    ??Display_Str_9
//  390       for(j=0;j<14;++j){
??Display_Str_8:
        MOVS     R5,#+0
//  391         if(b&0x04) {
??Display_Str_10:
        LSLS     R0,R7,#+29
        BPL.N    ??Display_Str_11
//  392           if(Mode==0) __LCD_SetPixl(Color);
        CBNZ     R4,??Display_Str_12
        MOV      R0,R9
??Display_Str_13:
        _BLF     __LCD_SetPixl,??__LCD_SetPixl??rT
        B.N      ??Display_Str_14
??Display_Str_7:
        UXTH     R1,R6
        BL       Get_TAB_8x14
        MOVS     R7,R0
        B.N      ??Display_Str_8
//  393           if(Mode==1) __LCD_SetPixl(BLACK);
??Display_Str_12:
        CMP      R4,#+1
        BNE.N    ??Display_Str_14
        MOVS     R0,#+0
        B.N      ??Display_Str_13
//  394         } else {
//  395           if(Mode==0) __LCD_SetPixl(BLACK);
??Display_Str_11:
        CBNZ     R4,??Display_Str_15
        MOVS     R0,#+0
        _BLF     __LCD_SetPixl,??__LCD_SetPixl??rT
        B.N      ??Display_Str_14
//  396           if(Mode==1) __LCD_SetPixl(Color);
??Display_Str_15:
        CMP      R4,#+1
        ITT     EQ 
        MOVEQ    R0,R9
        _BLFEQ   __LCD_SetPixl,??__LCD_SetPixl??rT
//  397         }
//  398         b>>=1;
??Display_Str_14:
        LSLS     R7,R7,#+16
        ASRS     R7,R7,#+17
//  399       }
        ADDS     R5,R5,#+1
        CMP      R5,#+14
        BLT.N    ??Display_Str_10
//  400     }
        ADDS     R6,R6,#+1
        SXTH     R6,R6
        CMP      R6,#+8
        BLT.N    ??Display_Str_5
//  401     if(*s==0x21) x0 +=4;           //ÏÔÊ¾Î»ÖÃË®Æ½·½Ïò+4//+4 in horizontal 
        LDR      R0,[SP, #+36]
        LDRB     R0,[R0, #+0]
        CMP      R0,#+33
        BNE.N    ??Display_Str_16
??Display_Str_9:
        ADDW     R11,R11,#+4
        B.N      ??Display_Str_17
//  402     else  x0 += 8;                 //ÏÔÊ¾Î»ÖÃË®Æ½·½Ïò+8//+8 in horizontal
??Display_Str_16:
        ADDW     R11,R11,#+8
//  403     ++s;                           //×Ö·û´®Ö¸Õë+1//Pointer to string incease by 1
??Display_Str_17:
        LDR      R0,[SP, #+36]
        ADDS     R0,R0,#+1
        STR      R0,[SP, #+36]
//  404   }
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BNE.N    ??Display_Str_4
//  405 }
??Display_Str_3:
        POP      {R4-R11,PC}      ;; return
        CFI EndBlock cfiBlock11
//  406 /*******************************************************************************
//  407  Display_Logo: ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾ÉÌ±êÍ¼°¸   ÊäÈë: X¡¢Y×ø±ê 
//  408  				Show logo in a specified position    Input: X,Y potition 
//  409 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function Display_Logo
        THUMB
//  410 void Display_Logo(u16 x0, u16 y0)
//  411 { 
Display_Logo:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+32
        CFI CFA R13+68
//  412   u8 *Ptr;
//  413   u16 i, x, y, Color[16];
//  414 //  u32 b;
//  415   
//  416   Ptr = (u8*)INF_BASE;
//  417   x = x0;
//  418   y = y0;
        MOVS     R4,R1
//  419   for(i=0; i<16; i++){        // 0x36~0x75: µ÷É«°å(Ã¿É«4B,Ë³ÐòÎªB,G,R,Alpha)//Sample color
        MOVS     R5,#+0
        MOV      R8,R0
        MOV      R9,R0
        MOV      R7,R9
        MOVS     R1,#+0
        B.N      ??Display_Logo_0
//  420     Color[i]=((Ptr[0x36 + i*4]>>3)<<11)+
//  421       ((Ptr[0x37 + i*4]>>2)<<5)+(Ptr[0x38 + i*4]>>3);
??Display_Logo_1:
        LDR.N    R3,??Display_Logo_2  ;; 0x803d836
        LDR.N    R6,??Display_Logo_2+0x4  ;; 0x803d837
        MOVS     R2,R1
        LDRB     R3,[R3, R2, LSL #+2]
        LDRB     R6,[R6, R2, LSL #+2]
        MOV      R0,SP
        LSRS     R3,R3,#+3
        LSRS     R6,R6,#+2
        LSLS     R6,R6,#+5
        ADDS     R3,R6,R3, LSL #+11
        LDR.N    R6,??Display_Logo_2+0x8  ;; 0x803d838
//  422   }      
        ADDS     R1,R1,#+1
        UXTH     R1,R1
        LDRB     R6,[R6, R2, LSL #+2]
        LSRS     R6,R6,#+3
        ADDS     R3,R3,R6
        STRH     R3,[R0, R2, LSL #+1]
??Display_Logo_0:
        CMP      R1,#+16
        BCC.N    ??Display_Logo_1
//  423   for(i=0; i<256*64/2; ++i){
        B.N      ??Display_Logo_3
//  424     Point_SCR(x, y);
??Display_Logo_4:
        MOVS     R1,R4
        MOVS     R0,R7
        BL       Point_SCR
//  425     LCD_PORT = Color[(Ptr[0x76 + i]&0xF0)>>4]; // ¸ß°ë×Ö½Ú   //Upper part 
        LDR.N    R1,??Display_Logo_2+0xC  ;; 0x803d876
//  426     x++;
        ADDS     R7,R7,#+1
        UXTH     R7,R7
        ADDS     R0,R1,R5
        MOV      R10,R0
        MOVS     R0,#+1610612736
        MOV      R11,R0
        LDRB     R0,[R10, #+0]
        MOV      R1,SP
//  427     if(x > x0+255) { x = x0; y++;}
        MOV      R6,R8
        ASRS     R0,R0,#+4
        LDRH     R0,[R1, R0, LSL #+1]
        ADDS     R6,R6,#+255
        CMP      R6,R7
        STRH     R0,[R11, #+0]
        ITTT    LT 
        MOVLT    R7,R9
        ADDLT    R4,R4,#+1
        UXTHLT   R4,R4
//  428     Point_SCR(x, y);
        MOVS     R1,R4
        MOVS     R0,R7
        BL       Point_SCR
//  429     LCD_PORT = Color[Ptr[0x76 + i]&0x0F];      // µÍ°ë×Ö½Ú// Lower part
        LDRB     R0,[R10, #+0]
        MOV      R1,SP
//  430     x++;
        ADDS     R7,R7,#+1
        LSLS     R0,R0,#+28
        LSRS     R0,R0,#+28
        LDRH     R0,[R1, R0, LSL #+1]
        UXTH     R7,R7
//  431     if(x > x0+255) { x = x0; y++;}
        CMP      R6,R7
        STRH     R0,[R11, #+0]
        ITTT    LT 
        MOVLT    R7,R9
        ADDLT    R4,R4,#+1
        UXTHLT   R4,R4
//  432   }
        ADDS     R5,R5,#+1
        UXTH     R5,R5
??Display_Logo_3:
        MOVS     R1,#+8192
        CMP      R5,R1
        BCC.N    ??Display_Logo_4
//  433 }
        ADD      SP,SP,#+32
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        Nop      
        DATA
??Display_Logo_2:
        DC32     0x803d836
        DC32     0x803d837
        DC32     0x803d838
        DC32     0x803d876
        CFI EndBlock cfiBlock12
//  434 /*******************************************************************************
//  435  LCD_Set_Block: 
//  436 *******************************************************************************/

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function LCD_Set_Block
        THUMB
//  437 void LCD_Set_Block(u16 x1, u16 x2, u16 y1, u16 y2) 
//  438 {
LCD_Set_Block:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOVS     R5,R0
//  439   if(LCD_Type == 0x02049327){
        LDR.N    R0,??DataTable22  ;; LCD_Type
        MOV      R8,R1
        LDR.N    R1,??DataTable23  ;; 0x2049327
        LDR      R0,[R0, #+0]
        MOVS     R6,R2
        MOVS     R7,R3
        MOVS     R4,#+1610612736
        CMP      R0,R1
        BNE.N    ??LCD_Set_Block_0
//  440     LCD_WR_Ctrl(0x2A);      // Block End X Address
        MOVS     R0,#+42
        BL       LCD_WR_Ctrl
//  441     LCD_PORT = (y1 >> 8); 
        LSRS     R0,R6,#+8
        STRH     R0,[R4, #+0]
//  442     LCD_PORT = (y1 & 0xFF); 
        UXTB     R0,R6
        STRH     R0,[R4, #+0]
//  443     LCD_PORT = (y2 >> 8); 
        LSRS     R0,R7,#+8
        STRH     R0,[R4, #+0]
//  444     LCD_PORT = (y2 & 0xFF); 
        UXTB     R0,R7
        STRH     R0,[R4, #+0]
//  445     LCD_WR_Ctrl(0x2B);      // Block End Y Address
        MOVS     R0,#+43
        BL       LCD_WR_Ctrl
//  446     LCD_PORT = (x1 >> 8); 
        LSRS     R0,R5,#+8
        STRH     R0,[R4, #+0]
//  447     LCD_PORT = (x1 & 0xFF); 
        UXTB     R0,R5
        STRH     R0,[R4, #+0]
//  448     LCD_PORT = (x2 >> 8); 
        MOV      R0,R8
        LSRS     R0,R0,#+8
        STRH     R0,[R4, #+0]
//  449     LCD_PORT = (x2 & 0xFF); 
        MOV      R0,R8
        UXTB     R0,R0
        STRH     R0,[R4, #+0]
//  450     LCD_WR_Ctrl(0x2C); 
        MOVS     R0,#+44
        BL       LCD_WR_Ctrl
        B.N      ??LCD_Set_Block_1
//  451   } else {
//  452     LCD_WR_REG(0x0211, y2);      // Block End X Address
??LCD_Set_Block_0:
        LDR.N    R0,??DataTable24  ;; 0x211
        MOVS     R1,R7
        BL       LCD_WR_REG
//  453     LCD_WR_REG(0x0213, x2);      // Block End Y Address
        LDR.N    R0,??DataTable25  ;; 0x213
        MOV      R1,R8
        BL       LCD_WR_REG
//  454 
//  455     LCD_WR_REG(0x0210, y1);      // Block Start X Address
        MOVS     R1,R6
        MOVS     R0,#+528
        BL       LCD_WR_REG
//  456     LCD_WR_REG(0x0212, x1);      // Block Start Y Address
        LDR.N    R0,??DataTable26  ;; 0x212
        MOVS     R1,R5
        BL       LCD_WR_REG
//  457   
//  458     LCD_WR_REG(0x0200, y1);
        MOVS     R1,R6
        MOVS     R0,#+512
        BL       LCD_WR_REG
//  459     LCD_WR_REG(0x0201, x1);
        LDR.N    R0,??DataTable27  ;; 0x201
        MOVS     R1,R5
        BL       LCD_WR_REG
//  460   
//  461     LCD_RS_LOW();
        LDR.N    R1,??DataTable28  ;; 0x40011414
        MOVS     R0,#+4096
        STR      R0,[R1, #+0]
//  462     LCD_PORT = 0x0202;             //GRAM Reg. Addr.
        LDR.N    R1,??DataTable29  ;; 0x202
        STRH     R1,[R4, #+0]
//  463     LCD_RS_HIGH();
        LDR.N    R1,??DataTable30  ;; 0x40011410
        STR      R0,[R1, #+0]
//  464   }
//  465 }
??LCD_Set_Block_1:
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable22:
        DC32     LCD_Type

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable23:
        DC32     0x2049327

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable24:
        DC32     0x211

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable25:
        DC32     0x213

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable26:
        DC32     0x212

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable27:
        DC32     0x201

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable28:
        DC32     0x40011414

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable29:
        DC32     0x202

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable30:
        DC32     0x40011410

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??__LCD_DMA_Ready??rT:
        LDR.N    R3,??Subroutine0_0  ;; __LCD_DMA_Ready
        BX       R3
        DATA
??Subroutine0_0:
        DC32     __LCD_DMA_Ready
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        THUMB
??__LCD_Fill??rT:
        LDR.N    R3,??Subroutine1_0  ;; __LCD_Fill
        BX       R3
        DATA
??Subroutine1_0:
        DC32     __LCD_Fill
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??__LCD_SetPixl??rT:
        LDR.N    R3,??Subroutine2_0  ;; __LCD_SetPixl
        BX       R3
        DATA
??Subroutine2_0:
        DC32     __LCD_SetPixl
        CFI EndBlock cfiBlock16

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
//  466 /******************************** END OF FILE *********************************/
// 
// 1 830 bytes in segment CODE
// 1 488 bytes in segment DATA_C
//     6 bytes in segment DATA_Z
//    12 bytes in segment INITTAB
// 
// 1 806 bytes of CODE  memory (+ 36 bytes shared)
// 1 488 bytes of CONST memory
//     6 bytes of DATA  memory
//
//Errors: none
//Warnings: none
